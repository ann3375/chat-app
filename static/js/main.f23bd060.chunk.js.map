{"version":3,"sources":["components/atoms/Typography/types/types.ts","components/atoms/Button/index.tsx","components/atoms/Wrapper/index.tsx","components/atoms/Typography/index.tsx","components/organism/MessageForm/constants/constants.ts","components/atoms/Icon/types/types.ts","components/atoms/Icon/index.tsx","router/endpoints.ts","components/molecules/Spinner/index.tsx","components/molecules/FileBlock/index.tsx","utils/covertFileSize.ts","utils/truncateFileName.ts","components/molecules/DialogMessage/index.tsx","components/organism/Dialog/index.tsx","components/atoms/Logo/index.tsx","components/atoms/Button/types/types.ts","utils/localStorageUtils.ts","services/types.ts","services/contants.ts","store/types/types.ts","store/genderListStore.ts","components/atoms/Avatar/types/types.ts","store/dialogStore.ts","components/atoms/Logo/types/types.ts","store/userListStore.ts","store/userStore.ts","store/RootStore.ts","components/molecules/UserMenuPopup/index.tsx","components/molecules/ButtonIcon/index.tsx","components/molecules/FormInput/types/types.ts","components/organism/Header/index.tsx","components/atoms/Label/index.tsx","hooks/constants.ts","components/molecules/FileInput/index.tsx","components/molecules/FormInput/index.tsx","components/organism/FilePreview/index.tsx","hooks/useFileReader.ts","utils/validateFile.ts","components/organism/MessageForm/index.tsx","utils/checkUserAvatar.ts","components/atoms/Avatar/index.tsx","components/molecules/UserStatus/index.tsx","components/organism/StatusBar/index.tsx","utils/formatLastUserMessage.ts","components/molecules/UserListItem/index.tsx","components/molecules/UserListNotification/index.tsx","components/organism/UserList/index.tsx","components/organism/Modal/index.tsx","components/templates/MainContainer/index.tsx","utils/constants.ts","components/templates/ChatPageTemplate/index.tsx","hooks/useWindowSize.tsx","pages/ChatPage/index.tsx","hooks/useWebsocket.ts","services/api.ts","components/molecules/CaptchaBlock/index.tsx","utils/convertDataToFormData.ts","utils/defineFieldError.ts","components/organism/LoginForm/index.tsx","components/molecules/FormSelect/index.tsx","components/organism/SignUpForm/index.tsx","components/templates/AuthPageTemplate/index.tsx","pages/AuthPage/index.tsx","router/PrivateRoute.tsx","router/index.tsx","index.tsx","../ /^/.*/.svg$/ groupOptions: {} namespace object"],"names":["TypographyTypeStyle","Button","children","type","isDisabled","variant","className","size","path","isNavLink","arialabel","onClick","classProps","classNames","to","disabled","Wrapper","flex","row","align","column","refBlock","props","ref","TypographyType","h1","h2","h3","h4","p1","p2","p3","span","Typography","color","Component","IconName","ColorType","SUPPORTED_FORMATS","VIDEO","AUDIO","IMAGE","Icon","name","rest","importedIconRef","React","useRef","useState","isLoading","setIsLoading","useEffect","importIcon","a","current","default","console","log","ImportedIcon","SCREENS","Pages","Spinner","spiner","FileBlock","fileName","file","handleImageClick","isLoaded","setIsLoaded","length","slice","lastIndexOf","fileSize","toFixed","includes","fileType","src","fileLink","onLoad","controls","onLoadedData","DialogMessage","isCurrentUserMessage","message","messageText","text","useCallback","window","open","Dialog","currentUsername","dialogMessages","messageBlockRef","messageBlock","scroll","scrollHeight","map","fromUser","createdAt","primary","Logo","logo","ButtonType","ButtonSize","ButtonVariant","localStorageUtils","accessToken","dialogs","localStorage","removeItem","this","getItem","JSON","parse","token","setItem","dialog","id","getDialogsInfo","currentDialog","find","dialogId","stringify","updatedDialogs","d","WebSocketMessageType","LOADING_STATE","URL","URL_API","WS_API","webSocketMessage","messageToWS","usersList","userData","sendMessage","gender","sendUserJoinedInfo","UserGender","AvatarSize","GenderListStore","rootStore","genderList","genderListFetchError","loadingState","NEVER","makeAutoObservable","error","PENDING","fetch","method","then","response","status","json","res","runInAction","setGenderList","genders","setError","LOADED","LogoSize","initialCurrentDialogInfo","companion","username","noGender","lastSeen","DialogStore","dialogsList","currentDialogInfo","currentDialogId","currentDialogError","dialogsFromLocalStorage","forUser","sort","toString","userStore","userInfo","getDialogInfo","newDialog","push","setDialogsInfo","clearDialogs","clearError","files","url","body","UserListStore","userList","excludedCurrentUserUserList","filter","item","user","getAccessToken","UserStore","isUserAuthenticate","tokens","userAuthDataError","setAccessToken","clearAcessToken","RootStoreContext","createContext","userListStore","dialogStore","genderListStore","UserMenuPopup","handleVisiblePopup","history","useHistory","useContext","button","clearUserInfo","clearUserListStore","clearDialogStore","SCREEN_LOGIN","ButtonIcon","iconName","small","icon","InputType","InputId","InputSize","Header","memo","isLoginPage","isChatPage","isVisiblePopup","setIsVisiblePopup","SCREEN_DIALOGS","large","mediumBlue","userIcon","Label","htmlFor","labelText","errorText","WindowSize","FileInput","field","uniqueKey","handleFileInputChange","addFile","value","filename","onChange","event","FormInput","placeholder","isRequired","isAvailableAutoComplete","classPropsInput","textarea","required","autoComplete","inputError","FilePreview","previewFileState","handleDeletePreviewFile","isVisiblePreviewFile","fileInfo","handleSetIsVisiblePreview","preview_active","closeCircleIcon","deleteIcon","initialFileInfoState","validateFile","isSizeError","isTypeError","isValid","schema","yup","shape","MessageForm","WSAction","isFileLoading","setFileInfo","setIsVisiblePreviewFile","Date","now","uniqueKeyInput","resetUniqueKeyInput","loadFile","reader","FileReader","onload","result","readAsDataURL","handleDeleteFile","handleResetUniqueKey","useFileReader","setPreviewFileState","useForm","mode","resolver","yupResolver","defaultValues","handleSubmit","control","reset","clearErrors","formState","errors","isSubmitSuccessful","fileErrors","onSubmit","data","formData","FormData","append","sendMessageFile","onChangeHandler","target","setTimeout","arrowDown","render","spinnerCircle","submit","checkUserAvatar","male","maleAvatar","female","femaleAvatar","noUserAvatar","Avatar","UserStatus","userStatus","StatusBar","isVisibleUserList","dialogInfo","handleVisibleUserList","closeIcon","arrowLeft","back","formatLastUserMessage","lastMessage","UserListItem","setDialogInfo","isCurrentUserLastMessage","activeClassName","medium","UserListNotification","UserList","observer","users","getLastMessage","index","Modal","notificationText","isError","notification","MainContainer","page","SIGN_UP_FIELDS","ChatPageTemplate","isLoadedDialogInfo","header","statusBar","messageForm","notificationButton","errorModal","spinner","width","windowSize","setWindowSize","handleWindowResize","innerWidth","addEventListener","removeEventListener","useWindowSize","isCurrentDialogPage","useRouteMatch","SCREEN_CURRENT_DIALOG","isDialogsPage","chat","SIZE_TABLET_S","isExact","ChatPage","setIsVisibleUserList","params","useParams","ws","isOpen","setIsOpen","setResult","isClosed","setIsClosed","WebSocket","send","close","onopen","onerror","onclose","onmessage","reverseData","replaceAll","eventType","wsResponse","updateCurrentDialogMessages","setUserList","setCurrentUserInfo","updateUserList","messageType","sendUserLogoutInfo","useMemo","fetchUserList","fetchUserData","useWebsocket","wsState","currentUserGender","messages","lastseen","setCurrentDialogInfo","currentCompanion","setDialogList","undefined","fetchApi","fetchCaptcha","setCaptchaURL","CaptchaBlock","captchaURL","handlerCaptchaURL","alt","updateIcon","convertDataToFormData","login","password","captcha","passwordConfirm","nickname","defineFieldError","match","min","max","LoginForm","sendUserAuthData","outline","SCREEN_SIGN_UP","FormSelect","options","setValue","isVisibleList","setIsVisibleList","genderValue","setGenderValue","darkGrey","shouldValidate","oneOf","typeError","SignUpForm","handleFetchGenderList","fetchGenderList","AuthPageTemplate","authForm","auth","AuthPage","PrivateRoute","component","redirectPath","Routes","basename","process","exact","SCREEN_HOME","ReactDOM","StrictMode","document","getElementById","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","e","Error","code","ids","keys","Object","module","exports"],"mappings":"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","file":"static/js/main.f23bd060.chunk.js","sourcesContent":["export enum TypographyTypeStyle {\n  h1 = 'h1',\n  h2 = 'h2',\n  h3 = 'h3',\n  h4 = 'h4',\n  p1 = 'p1',\n  p2 = 'p2',\n  p3 = 'p3',\n  span = 'span',\n}\n\nexport const TypographyType = {\n  [TypographyTypeStyle.h1]: 'h1',\n  [TypographyTypeStyle.h2]: 'h2',\n  [TypographyTypeStyle.h3]: 'h3',\n  [TypographyTypeStyle.h4]: 'h4',\n  [TypographyTypeStyle.p1]: 'p',\n  [TypographyTypeStyle.p2]: 'p',\n  [TypographyTypeStyle.p3]: 'p',\n  [TypographyTypeStyle.span]: 'span',\n} as const;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { ButtonSize, ButtonType, ButtonVariant } from './types/types';\nimport { NavLink } from 'react-router-dom';\nimport { SCREENS } from '../../../router/endpoints';\n\nimport './button.scss';\n\nexport interface IButton {\n  type: ButtonType;\n  children: React.ReactNode;\n  isDisabled?: boolean;\n  isNavLink?: boolean;\n  path?: SCREENS;\n  variant?: ButtonVariant;\n  size?: ButtonSize;\n  className?: string;\n  arialabel?: string;\n  onClick?: () => void;\n}\n\nexport const Button: React.FC<IButton> = ({\n  children,\n  type,\n  isDisabled,\n  variant,\n  className,\n  size,\n  path,\n  isNavLink,\n  arialabel,\n  onClick,\n}) => {\n  const classProps = classNames('button', {\n    [`button_size_${size}`]: size,\n    [`button_variant_${variant}`]: variant,\n    [`${className}`]: className,\n  });\n\n  if (isNavLink && path) {\n    return (\n      <NavLink className={classProps} to={path}>\n        {children}\n      </NavLink>\n    );\n  }\n\n  return (\n    <button\n      onClick={onClick}\n      type={type}\n      disabled={isDisabled}\n      className={classProps}\n      aria-label={arialabel}\n    >\n      {children}\n    </button>\n  );\n};\n","import React, { LegacyRef } from 'react';\nimport classNames from 'classnames';\n\nimport './wrapper.scss';\n\nexport interface IWrapper {\n  children?: React.ReactNode;\n  className?: string;\n  flex?: boolean;\n  column?: boolean;\n  row?: boolean;\n  align?: 'center' | 'flex-start';\n  refBlock?: LegacyRef<HTMLDivElement> | undefined;\n  onClick?: () => void;\n}\n\nexport const Wrapper: React.FC<IWrapper> = ({\n  className,\n  children,\n  flex,\n  row,\n  align,\n  column,\n  refBlock,\n  ...props\n}) => {\n  const classProps = classNames('', {\n    ['wrapper_flex']: flex,\n    ['wrapper_flex_column']: column,\n    ['wrapper_flex_row']: row,\n    [`wrapper_flex_align_${align}`]: align,\n    [`${className}`]: className,\n  });\n  return (\n    <div ref={refBlock} className={classProps} {...props}>\n      {children}\n    </div>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { TypographyType, TypographyTypeStyle } from './types/types';\nimport { ColorType } from '../Icon/types/types';\n\nimport './typographyStyle.scss';\n\ninterface ITypography {\n  variant: TypographyTypeStyle;\n  children: React.ReactNode;\n  className?: string;\n  color?: ColorType;\n}\n\nexport const Typography: React.FC<ITypography> = ({\n  variant,\n  children,\n  color,\n  className,\n  ...props\n}) => {\n  const Component = TypographyType[variant];\n  return (\n    <Component\n      className={classNames('typography', {\n        [`typography_variant_${variant}`]: variant,\n        [`typography_color_${color}`]: color,\n        [`${className}`]: className,\n      })}\n      {...props}\n    >\n      {children}\n    </Component>\n  );\n};\n","export const SUPPORTED_FORMATS = {\n  VIDEO: ['video/mp4', 'video/ogg', 'video/webm'],\n  AUDIO: ['audio/mpeg', 'audio/ogg'],\n  IMAGE: ['image/jpg', 'image/jpeg', 'image/gif', 'image/png', 'image/svg+xml'],\n};\n","export enum IconName {\n  inputError = 'inputError',\n  sendMessage = 'sendMessage',\n  addFile = 'addFile',\n  logo = 'logo',\n  maleAvatar = 'maleAvatar',\n  femaleAvatar = 'femaleAvatar',\n  noUserAvatar = 'noUserAvatar',\n  userIcon = 'userIcon',\n  userList = 'userList',\n  arrowLeft = 'arrowLeft',\n  closeIcon = 'closeIcon',\n  spiner = 'spiner',\n  spinnerCircle = 'spinnerCircle',\n  updateIcon = 'updateIcon',\n  arrowDown = 'arrowDown',\n  deleteIcon = 'deleteIcon',\n  closeCircleIcon = 'closeCircleIcon',\n}\n\nexport enum ColorType {\n  error = 'tomato',\n  primary = 'cornflowerblue',\n  grey = 'lightgray',\n  darkGrey = 'darkgrey',\n  mediumBlue = 'mediumBlue',\n}\n","import React, { useState } from 'react';\n\ninterface IconProps extends React.SVGProps<SVGSVGElement> {\n  name: string;\n}\n\nexport const Icon: React.FC<IconProps> = ({ name, ...rest }): JSX.Element | null => {\n  const importedIconRef = React.useRef<React.FC<React.SVGProps<SVGSVGElement>>>();\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  React.useEffect(() => {\n    setIsLoading(true);\n    const importIcon = async (): Promise<void> => {\n      try {\n        importedIconRef.current = (\n          await import(`!!@svgr/webpack?-svgo,+titleProp,+ref!../../../assets/images/${name}.svg`)\n        ).default;\n      } catch (err) {\n        console.log(err);\n        throw err;\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    importIcon();\n    return () => {\n      setIsLoading(false);\n    };\n  }, [name]);\n\n  if (!isLoading && importedIconRef.current) {\n    const { current: ImportedIcon } = importedIconRef;\n\n    return <ImportedIcon {...rest} />;\n  }\n\n  return null;\n};\n","export enum SCREENS {\n  SCREEN_HOME = '/',\n  SCREEN_LOGIN = '/login',\n  SCREEN_SIGN_UP = '/signup',\n  SCREEN_CURRENT_DIALOG = '/dialogs/:id',\n  SCREEN_DIALOGS = '/dialogs',\n}\n\nexport enum Pages {\n  auth = 'auth',\n  chat = 'chat',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Wrapper } from '../../atoms/Wrapper';\nimport { Icon } from '../../atoms/Icon';\nimport { IconName } from '../../atoms/Icon/types/types';\n\nimport './spinner.scss';\n\ninterface ISpinner {\n  className?: string;\n}\n\nexport const Spinner: React.FC<ISpinner> = ({ className }) => {\n  const classProps = classNames('spinner', {\n    [`${className}`]: className,\n  });\n  return (\n    <Wrapper className={classProps}>\n      <Icon name={IconName.spiner} className=\"spinner__icon\" />\n    </Wrapper>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { FileInfoType } from '../../../hooks/useFileReader';\nimport { convertFileSize } from '../../../utils/covertFileSize';\nimport { truncateFileName } from '../../../utils/truncateFileName';\nimport { Typography } from '../../atoms/Typography';\nimport { TypographyTypeStyle } from '../../atoms/Typography/types/types';\nimport { Wrapper } from '../../atoms/Wrapper';\nimport { SUPPORTED_FORMATS } from '../../organism/MessageForm/constants/constants';\nimport { Spinner } from '../Spinner';\n\nimport './fileBlock.scss';\n\ninterface IFileBlock {\n  file: FileInfoType;\n  handleImageClick?: (fileLink: string) => void;\n  className?: string;\n}\n\nexport const FileBlock: React.FC<IFileBlock> = ({ file, className, handleImageClick }) => {\n  const classProps = classNames('file-block', {\n    [`${className}`]: className,\n  });\n\n  const [isLoaded, setIsLoaded] = useState<boolean>(false);\n\n  return (\n    <Wrapper className={classProps}>\n      {!isLoaded ? (\n        <Wrapper className=\"file-block__spinner\">\n          <Spinner />\n        </Wrapper>\n      ) : (\n        <Wrapper flex align=\"center\" className=\"file-block__info\">\n          <Typography className=\"file-block__filename\" variant={TypographyTypeStyle.p1}>\n            {truncateFileName(file.fileName)}\n          </Typography>\n\n          <Typography className=\"file-block__size\" variant={TypographyTypeStyle.p2}>\n            {convertFileSize(file.fileSize)}\n          </Typography>\n        </Wrapper>\n      )}\n\n      {SUPPORTED_FORMATS.IMAGE.includes(file.fileType) && (\n        <img\n          className=\"file-block__image\"\n          src={file.fileLink}\n          onClick={() => handleImageClick && handleImageClick(file.fileLink)}\n          onLoad={() => setIsLoaded(true)}\n        />\n      )}\n\n      {SUPPORTED_FORMATS.VIDEO.includes(file.fileType) && (\n        <video controls className=\"file-block__video\" onLoadedData={() => setIsLoaded(true)}>\n          <source src={file.fileLink} type={file.fileType} />\n        </video>\n      )}\n\n      {SUPPORTED_FORMATS.AUDIO.includes(file.fileType) && (\n        <audio controls className=\"file-block__audio\" onLoadedData={() => setIsLoaded(true)}>\n          <source src={file.fileLink} type={file.fileType} />\n        </audio>\n      )}\n    </Wrapper>\n  );\n};\n","export function convertFileSize(size: number): string {\n  if (size > 100000) {\n    return `${(size / 1024 ** 2).toFixed(1)} MB`;\n  } else {\n    return `${(size / 1024).toFixed(1)} KB`;\n  }\n}\n","export function truncateFileName(fileName: string): string {\n  if (fileName.length > 80) {\n    return fileName.slice(0, 80) + '..' + fileName.slice(fileName.lastIndexOf('.'));\n  }\n  return fileName;\n}\n","import React, { useCallback } from 'react';\nimport classNames from 'classnames';\nimport { Wrapper } from '../../atoms/Wrapper';\nimport { Typography } from '../../atoms/Typography';\nimport { FileBlock } from '../FileBlock';\nimport { TypographyTypeStyle } from '../../atoms/Typography/types/types';\nimport { MessageType } from '../../../store/types/types';\n\nimport './dialogMessage.scss';\n\ninterface IDialogMessage {\n  isCurrentUserMessage: boolean;\n  message: MessageType;\n}\n\nexport const DialogMessage: React.FC<IDialogMessage> = ({ isCurrentUserMessage, message }) => {\n  const classProps = classNames('message', {\n    ['message_side_left']: !isCurrentUserMessage,\n    ['message_side_right']: isCurrentUserMessage,\n  });\n\n  const { text: messageText, file } = message;\n\n  const handleImageClick = useCallback((fileLink: string) => {\n    window.open(fileLink);\n  }, []);\n\n  return (\n    <Wrapper className={classProps}>\n      {file && <FileBlock file={file} handleImageClick={handleImageClick} />}\n\n      {messageText && (\n        <Typography variant={TypographyTypeStyle.p1} className=\"message__text\">\n          {messageText}\n        </Typography>\n      )}\n    </Wrapper>\n  );\n};\n","import React, { useEffect, useRef } from 'react';\nimport { Wrapper } from '../../atoms/Wrapper';\nimport { Typography } from '../../atoms/Typography';\nimport { DialogMessage } from '../../molecules/DialogMessage';\nimport { MessageType } from '../../../store/types/types';\nimport { TypographyTypeStyle } from '../../atoms/Typography/types/types';\nimport { ColorType } from '../../atoms/Icon/types/types';\n\nimport './dialog.scss';\n\ninterface IDialog {\n  dialogMessages: MessageType[] | undefined;\n  currentUsername: string;\n}\n\nexport const Dialog: React.FC<IDialog> = ({ currentUsername, dialogMessages }) => {\n  const messageBlockRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const { current: messageBlock } = messageBlockRef;\n\n    if (messageBlock) {\n      messageBlock.scroll(0, messageBlock.scrollHeight);\n    }\n  }, [dialogMessages?.length]);\n\n  return (\n    <>\n      {dialogMessages?.length ? (\n        <Wrapper className=\"messages-area\" refBlock={messageBlockRef}>\n          {dialogMessages.map((message) => (\n            <DialogMessage\n              message={message}\n              isCurrentUserMessage={message.fromUser === currentUsername}\n              key={message.createdAt}\n            />\n          ))}\n        </Wrapper>\n      ) : (\n        <Wrapper className=\"messages-area__no-messages-block\">\n          <Typography variant={TypographyTypeStyle.h4} color={ColorType.primary}>\n            Сообщений пока нет...\n          </Typography>\n        </Wrapper>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Wrapper } from '../Wrapper';\nimport { Icon } from '../Icon';\nimport { IconName } from '../Icon/types/types';\nimport { LogoSize } from './types/types';\n\nimport './logo.scss';\n\ninterface ILogo {\n  size: LogoSize;\n  className?: string;\n}\n\nexport const Logo: React.FC<ILogo> = ({ size, className }) => {\n  const classProps = classNames('logo', {\n    [`logo_size_${size}`]: size,\n    [`${className}`]: className,\n  });\n\n  return (\n    <Wrapper className={classProps}>\n      <Icon name={IconName.logo} />\n    </Wrapper>\n  );\n};\n","export enum ButtonType {\n  button = 'button',\n  reset = 'reset',\n  submit = 'submit',\n}\n\nexport enum ButtonSize {\n  large = 'large',\n  medium = 'medium',\n  small = 'small',\n}\n\nexport enum ButtonVariant {\n  primary = 'primary',\n  outline = 'outline',\n  notification = 'notification',\n  icon = 'icon',\n}\n","import { DialogType } from '../store/types/types';\n\nclass LocalStorageUtils {\n  private accessToken = 'accessToken';\n  private dialogs = 'dialogs';\n\n  clearAcessToken(): void {\n    localStorage.removeItem(this.accessToken);\n  }\n\n  clearDialogs(): void {\n    localStorage.removeItem(this.dialogs);\n  }\n\n  getAccessToken(): string | null {\n    return localStorage.getItem(this.accessToken);\n  }\n\n  getDialogsInfo(): DialogType[] | null {\n    const dialogs = localStorage.getItem(this.dialogs);\n    if (dialogs) {\n      return JSON.parse(dialogs);\n    }\n    return null;\n  }\n\n  setAccessToken(token: string): void {\n    return localStorage.setItem(this.accessToken, token);\n  }\n\n  setDialogsInfo(dialog: DialogType, id: string): void {\n    const dialogs = this.getDialogsInfo();\n\n    if (dialogs) {\n      const currentDialog = dialogs.find((dialog) => dialog.dialogId === id);\n\n      if (!currentDialog?.dialogId) {\n        return localStorage.setItem(this.dialogs, JSON.stringify([...dialogs, dialog]));\n      }\n      if (currentDialog?.dialogId) {\n        const updatedDialogs = [\n          ...dialogs.map((d) => {\n            if (d.dialogId === id) {\n              return (d = dialog);\n            }\n            return d;\n          }),\n        ];\n        return localStorage.setItem(this.dialogs, JSON.stringify(updatedDialogs));\n      }\n    }\n\n    localStorage.setItem(this.dialogs, JSON.stringify([dialog]));\n  }\n}\n\nexport const localStorageUtils = new LocalStorageUtils();\n","export type FetchGenderListResponse = {\n  genders: {\n    id: string;\n    gender: string;\n  }[];\n};\n\nexport enum WebSocketMessageType {\n  usersList = 'users_list',\n  userData = 'user_data',\n  sendMessage = 'send_message',\n  sendUserJoinedInfo = 'user_joined',\n  sendUserLogoutInfo = 'user_logout',\n}\n\nexport interface IMessageToWS {\n  (messageType: WebSocketMessageType, data?: Record<string, unknown>): void;\n}\n\nexport interface IWSAction {\n  fetchUserList: () => void;\n  fetchUserData: () => void;\n  sendMessage: (text: string) => void;\n  sendUserJoinedInfo: (name: string, gender: string) => void;\n}\n","import { IMessageToWS, WebSocketMessageType } from './types';\n\nexport const URL = 'http://109.194.37.212';\nconst WS_URL = 'ws://109.194.37.212';\nexport const HTTP_PORT = '93';\nconst WS_PORT = '2346';\n\nexport const URL_API = `${URL}:${HTTP_PORT}/api`;\nexport const WS_API = `${WS_URL}:${WS_PORT}`;\n\nexport const webSocketMessage = {\n  fetchUserList: (messageToWS: IMessageToWS): void => {\n    messageToWS(WebSocketMessageType.usersList);\n  },\n\n  fetchUserData: (messageToWS: IMessageToWS): void => {\n    messageToWS(WebSocketMessageType.userData);\n  },\n\n  sendMessage: (messageToWS: IMessageToWS, text: string): void => {\n    messageToWS(WebSocketMessageType.sendMessage, { message: text });\n  },\n\n  sendUserJoinedInfo: (messageToWS: IMessageToWS, name: string, gender: string): void => {\n    messageToWS(WebSocketMessageType.sendUserJoinedInfo, { name, gender });\n  },\n};\n","import { FileInfoType } from '../../hooks/useFileReader';\n\nexport enum LOADING_STATE {\n  LOADED = 'LOADED',\n  ERROR = 'ERROR',\n  NEVER = 'NEVER',\n  PENDING = 'PENDING',\n}\n\nexport type GendersListType = {\n  id: string;\n  gender: string;\n};\n\nexport type MessageType = {\n  text: string;\n  fromUser: string;\n  forUser: string;\n  createdAt: number | null;\n  file?: FileInfoType;\n};\n\nexport type DialogType = {\n  dialogId: string;\n  dialogMessages: MessageType[];\n};\n\nexport type CurrentDialogInfoType = {\n  companion: {\n    username: string;\n    gender: string;\n    lastSeen: string;\n  };\n};\n","import { makeAutoObservable, runInAction } from 'mobx';\nimport { URL_API } from '../services/contants';\nimport { RootStore } from './RootStore';\nimport { GendersListType, LOADING_STATE } from './types/types';\n\nexport class GenderListStore {\n  rootStore: RootStore;\n  genderList: GendersListType[] = [];\n  genderListFetchError = '';\n  loadingState = LOADING_STATE.NEVER;\n\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n    makeAutoObservable(this);\n  }\n\n  setGenderList(genderList: GendersListType[]): void {\n    this.genderListFetchError = '';\n    this.genderList = genderList;\n  }\n\n  setError(error: string): void {\n    this.genderListFetchError = error;\n  }\n\n  *fetchGenderList(): Generator<Promise<void>, void, GendersListType[]> {\n    this.genderList = [];\n    this.loadingState = LOADING_STATE.PENDING;\n\n    try {\n      yield fetch(`${URL_API}/auth`, {\n        method: 'GET',\n      }).then((response) => {\n        if (response.status === 200) {\n          response.json().then((res) => {\n            runInAction(() => {\n              this.setGenderList(res.genders);\n            });\n          });\n        } else {\n          response.text().then((error) => {\n            runInAction(() => {\n              this.setError(error);\n            });\n          });\n        }\n      });\n    } catch (e) {\n      runInAction(() => {\n        this.setError((e as Error).message);\n      });\n    } finally {\n      this.loadingState = LOADING_STATE.LOADED;\n    }\n  }\n}\n","export enum UserGender {\n  male = 'male',\n  female = 'female',\n  noGender = 'noGender',\n}\n\nexport enum AvatarSize {\n  large = 'large',\n  medium = 'medium',\n  small = 'small',\n}\n","import { makeAutoObservable, runInAction } from 'mobx';\nimport { RootStore } from './RootStore';\nimport { UserGender } from '../components/atoms/Avatar/types/types';\nimport { URL_API } from '../services/contants';\nimport { CurrentDialogInfoType, DialogType, LOADING_STATE, MessageType } from './types/types';\nimport { localStorageUtils } from '../utils/localStorageUtils';\n\nconst initialCurrentDialogInfo = {\n  companion: {\n    username: '',\n    gender: UserGender.noGender,\n    lastSeen: '',\n  },\n};\n\nexport class DialogStore {\n  rootStore: RootStore;\n  dialogsList: DialogType[] = [];\n  currentDialogInfo: CurrentDialogInfoType = initialCurrentDialogInfo;\n  currentDialogId = '';\n  currentDialogError = '';\n  loadingState: LOADING_STATE = LOADING_STATE.NEVER;\n\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n    makeAutoObservable(this);\n  }\n\n  getDialogInfo(id: string): DialogType | undefined {\n    return this.dialogsList.find((dialog) => dialog.dialogId === id);\n  }\n\n  setDialogList(): void {\n    const dialogsFromLocalStorage = localStorageUtils.getDialogsInfo();\n    this.dialogsList = dialogsFromLocalStorage ? dialogsFromLocalStorage : [];\n  }\n\n  setCurrentDialogInfo(username: string, lastSeen: string, id: string, gender: UserGender): void {\n    this.currentDialogInfo.companion = {\n      username,\n      lastSeen,\n      gender,\n    };\n    this.currentDialogId = id;\n  }\n\n  updateCurrentDialogMessages(message: MessageType): void {\n    const id = [message.fromUser, message.forUser].sort().toString();\n    const currentUsername = this.rootStore.userStore.userInfo.username;\n\n    if (message.forUser === currentUsername || message.fromUser === currentUsername) {\n      const currentDialog = this.getDialogInfo(id);\n\n      if (!currentDialog) {\n        const newDialog = {\n          dialogId: id,\n          dialogMessages: [message],\n        };\n        this.dialogsList.push(newDialog);\n        localStorageUtils.setDialogsInfo(newDialog, id);\n      }\n\n      if (currentDialog) {\n        currentDialog.dialogMessages.push(message);\n        localStorageUtils.setDialogsInfo(currentDialog, id);\n      }\n    }\n  }\n\n  setError(error: string): void {\n    this.currentDialogError = error;\n  }\n\n  clearError(): void {\n    this.currentDialogError = '';\n  }\n\n  clearDialogs(): void {\n    this.dialogsList = [];\n  }\n\n  clearDialogStore(): void {\n    this.clearDialogs();\n    this.clearError();\n    this.currentDialogId = '';\n    this.loadingState = LOADING_STATE.NEVER;\n    this.currentDialogInfo = initialCurrentDialogInfo;\n  }\n\n  async sendMessageFile<R>(files: FormData, url: string): Promise<R | string | undefined> {\n    runInAction(() => {\n      this.loadingState = LOADING_STATE.PENDING;\n    });\n    try {\n      return await fetch(`${URL_API}${url}`, {\n        method: 'POST',\n        body: files,\n      }).then((response) => {\n        if (response.status === 200) {\n          if (this.currentDialogError) {\n            runInAction(() => {\n              this.clearError();\n            });\n          }\n          return response.text();\n        } else {\n          response.text().then((error) => {\n            runInAction(() => {\n              console.log('error', error);\n              this.setError(error);\n            });\n          });\n        }\n      });\n    } catch (e) {\n      runInAction(() => {\n        const error = (e as Error).message;\n        this.setError(\n          error === 'Failed to fetch'\n            ? 'Возникла ошибка при отправке файла, попробуйте снова...'\n            : error\n        );\n      });\n    } finally {\n      runInAction(() => {\n        this.loadingState = LOADING_STATE.LOADED;\n      });\n    }\n  }\n}\n","export enum LogoSize {\n  large = 'large',\n  medium = 'medium',\n}\n","import { makeAutoObservable, runInAction } from 'mobx';\nimport { IUserListItem } from '../components/molecules/UserListItem';\nimport { RootStore } from './RootStore';\nimport { LOADING_STATE } from './types/types';\n\nexport class UserListStore {\n  rootStore: RootStore;\n  userList: IUserListItem[] = [];\n\n  loadingState: LOADING_STATE = LOADING_STATE.NEVER;\n\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n    makeAutoObservable(this);\n  }\n\n  clearUserListStore(): void {\n    this.userList = [];\n    this.loadingState = LOADING_STATE.NEVER;\n  }\n\n  setUserList(userList: IUserListItem[]): void {\n    const currentUsername = this.rootStore.userStore.userInfo.username;\n\n    const excludedCurrentUserUserList = userList.filter(\n      (item: { name: string; gender: string }) => item.name !== currentUsername\n    );\n\n    runInAction(() => {\n      this.userList = excludedCurrentUserUserList;\n      this.loadingState = LOADING_STATE.LOADED;\n    });\n  }\n\n  updateUserList(user: IUserListItem): void {\n    const currentUsername = this.rootStore.userStore.userInfo.username;\n\n    runInAction(() => {\n      if (currentUsername !== user.name && !this.userList.find((item) => item.name === user.name)) {\n        this.userList.push(user);\n      }\n    });\n  }\n}\n","import { makeAutoObservable, runInAction } from 'mobx';\nimport { URL_API } from '../services/contants';\nimport { localStorageUtils } from '../utils/localStorageUtils';\nimport { RootStore } from './RootStore';\nimport { LOADING_STATE } from './types/types';\n\nexport type UserInfoType = {\n  name: string;\n  gender: string;\n};\n\nconst accessToken = localStorageUtils.getAccessToken();\n\nexport class UserStore {\n  rootStore: RootStore;\n  userInfo = {\n    username: '',\n    gender: '',\n    isUserAuthenticate: !!accessToken,\n  };\n\n  tokens = {\n    accessToken: accessToken ? accessToken : '',\n  };\n\n  loadingState: LOADING_STATE = LOADING_STATE.NEVER;\n  userAuthDataError = '';\n\n  constructor(rootStore: RootStore) {\n    makeAutoObservable(this);\n    this.rootStore = rootStore;\n  }\n\n  setCurrentUserInfo(userInfo: UserInfoType): void {\n    const { name: username, gender } = userInfo;\n\n    this.userInfo = {\n      username,\n      gender,\n      isUserAuthenticate: true,\n    };\n  }\n\n  setAccessToken(accessToken: string): void {\n    this.tokens = {\n      accessToken,\n    };\n    this.userInfo.isUserAuthenticate = true;\n    localStorageUtils.setAccessToken(accessToken);\n  }\n\n  clearUserInfo(): void {\n    localStorageUtils.clearAcessToken();\n\n    this.userInfo = {\n      username: '',\n      gender: '',\n      isUserAuthenticate: false,\n    };\n\n    this.tokens.accessToken = '';\n  }\n\n  setError(error: string): void {\n    this.userAuthDataError = error;\n  }\n\n  clearError(): void {\n    this.userAuthDataError = '';\n  }\n\n  setLoadingState(loadingState: LOADING_STATE): void {\n    this.loadingState = loadingState;\n  }\n\n  async sendUserAuthData<R>(userData: FormData, url: string): Promise<R | undefined> {\n    this.loadingState = LOADING_STATE.PENDING;\n\n    try {\n      return await fetch(`${URL_API}${url}`, {\n        method: 'POST',\n        body: userData,\n      }).then((response) => {\n        if (response.status === 200) {\n          if (this.userAuthDataError) {\n            runInAction(() => {\n              this.clearError();\n            });\n          }\n          return response.json();\n        } else {\n          response.text().then((error) => {\n            runInAction(() => {\n              this.setError(error);\n            });\n          });\n        }\n      });\n    } catch (e) {\n      runInAction(() => {\n        this.setError((e as Error).message);\n      });\n    } finally {\n      this.loadingState = LOADING_STATE.LOADED;\n    }\n  }\n}\n","import { createContext } from 'react';\nimport { GenderListStore } from './genderListStore';\nimport { DialogStore } from './dialogStore';\nimport { UserListStore } from './userListStore';\nimport { UserStore } from './userStore';\n\nexport class RootStore {\n  userStore = new UserStore(this);\n  userListStore = new UserListStore(this);\n  dialogStore = new DialogStore(this);\n  genderListStore = new GenderListStore(this);\n\n  constructor() {\n    this.userStore = new UserStore(this);\n    this.genderListStore = new GenderListStore(this);\n    this.dialogStore = new DialogStore(this);\n    this.genderListStore = new GenderListStore(this);\n  }\n}\n\nexport const RootStoreContext = createContext(new RootStore());\n","import React, { useContext } from 'react';\nimport { useHistory } from 'react-router';\nimport { Button } from '../../atoms/Button';\nimport { Wrapper } from '../../atoms/Wrapper';\nimport { SCREENS } from '../../../router/endpoints';\nimport { localStorageUtils } from '../../../utils/localStorageUtils';\nimport { ButtonType } from '../../atoms/Button/types/types';\nimport { RootStoreContext } from '../../../store/RootStore';\n\nimport './userMenuPopup.scss';\n\ninterface IUserMenuPopup {\n  handleVisiblePopup: () => void;\n}\n\nexport const UserMenuPopup: React.FC<IUserMenuPopup> = ({ handleVisiblePopup }) => {\n  const history = useHistory();\n  const { dialogStore, userStore, userListStore } = useContext(RootStoreContext);\n\n  const handleClearDialogsButton = () => {\n    handleVisiblePopup();\n    localStorageUtils.clearDialogs();\n    dialogStore.clearDialogs();\n  };\n\n  const handleLogoutButton = () => {\n    handleVisiblePopup();\n    userStore.clearUserInfo();\n    userListStore.clearUserListStore();\n    dialogStore.clearDialogStore();\n    history.push(SCREENS.SCREEN_LOGIN);\n  };\n\n  return (\n    <Wrapper className=\"user-menu-popup\">\n      <ul className=\"user-menu-popup__list\">\n        <li className=\"user-menu-popup__item\">\n          <Button\n            type={ButtonType.button}\n            onClick={handleClearDialogsButton}\n            className=\"user-menu-popup__button\"\n          >\n            Очистить чаты\n          </Button>\n        </li>\n        <li className=\"user-menu-popup__item\">\n          <Button\n            type={ButtonType.button}\n            onClick={handleLogoutButton}\n            className=\"user-menu-popup__button\"\n          >\n            Выйти\n          </Button>\n        </li>\n      </ul>\n    </Wrapper>\n  );\n};\n","import React from 'react';\nimport { Button } from '../../atoms/Button';\nimport { IButton } from '../../atoms/Button';\nimport { Icon } from '../../atoms/Icon';\nimport { ButtonSize, ButtonVariant } from '../../atoms/Button/types/types';\nimport { ColorType, IconName } from '../../atoms/Icon/types/types';\n\nimport './buttonIcon.scss';\n\ninterface IButtonIcon extends Omit<IButton, 'size' | 'variant' | 'children'> {\n  iconName: IconName;\n  color?: ColorType;\n  arialabel?: string;\n}\n\nexport const ButtonIcon: React.FC<IButtonIcon> = ({\n  iconName,\n  type,\n  color,\n  isDisabled,\n  className,\n  arialabel,\n  onClick,\n}) => {\n  return (\n    <Button\n      type={type}\n      size={ButtonSize.small}\n      isDisabled={isDisabled}\n      onClick={onClick}\n      className={className}\n      variant={ButtonVariant.icon}\n      arialabel={arialabel}\n    >\n      <Icon name={iconName} color={color} className=\"button__icon\" />\n    </Button>\n  );\n};\n","export enum InputType {\n  text = 'text',\n  email = 'email',\n  password = 'password',\n  file = 'file',\n  textarea = 'textarea',\n  select = 'select',\n}\n\nexport enum InputId {\n  login = 'login',\n  password = 'password',\n  passwordConfirm = 'passwordConfirm',\n  nickname = 'nickname',\n  captcha = 'captcha',\n  gender = 'gender',\n  files = 'files',\n  messageText = 'messageText',\n}\n\nexport enum InputSize {\n  large = 'large',\n  medium = 'medium',\n}\n","import React, { useCallback, useState } from 'react';\nimport classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\nimport { Logo } from '../../atoms/Logo';\nimport { Typography } from '../../atoms/Typography';\nimport { Wrapper } from '../../atoms/Wrapper';\nimport { UserMenuPopup } from '../../molecules/UserMenuPopup';\nimport { ButtonIcon } from '../../molecules/ButtonIcon';\nimport { ColorType, IconName } from '../../atoms/Icon/types/types';\nimport { LogoSize } from '../../atoms/Logo/types/types';\nimport { TypographyTypeStyle } from '../../atoms/Typography/types/types';\nimport { ButtonType } from '../../atoms/Button/types/types';\nimport { SCREENS } from '../../../router/endpoints';\n\nimport './header.scss';\n\ninterface IHeader {\n  isLoginPage?: boolean;\n  isChatPage?: boolean;\n}\n\nexport const Header = React.memo(function Header({ isLoginPage, isChatPage }: IHeader) {\n  const [isVisiblePopup, setIsVisiblePopup] = useState<boolean>(false);\n\n  const handleVisiblePopup = useCallback(() => {\n    setIsVisiblePopup(!isVisiblePopup);\n  }, [isVisiblePopup]);\n\n  const classProps = classNames('header', {\n    [`auth-page__header`]: isLoginPage,\n    [`chat-page__header`]: isChatPage,\n  });\n\n  return (\n    <header className={classProps}>\n      {isChatPage ? (\n        <NavLink to={isChatPage ? SCREENS.SCREEN_DIALOGS : SCREENS.SCREEN_LOGIN}>\n          <Logo size={LogoSize.large} className=\"header__logo\" />\n        </NavLink>\n      ) : (\n        <Logo size={LogoSize.large} className=\"header__logo\" />\n      )}\n\n      {isLoginPage ? (\n        <Typography variant={TypographyTypeStyle.h1} className=\"header__text\">\n          Wellcome to\n          <Typography variant={TypographyTypeStyle.span} color={ColorType.primary}>\n            {' '}\n            Chatty\n          </Typography>\n          <Typography variant={TypographyTypeStyle.span} color={ColorType.mediumBlue}>\n            !\n          </Typography>\n        </Typography>\n      ) : (\n        <Wrapper className=\"header__info\">\n          <ButtonIcon\n            className=\"header__button\"\n            type={ButtonType.button}\n            color={ColorType.primary}\n            iconName={IconName.userIcon}\n            onClick={handleVisiblePopup}\n          />\n          <Wrapper\n            className={classNames('header__user-menu-popup', {\n              'header__user-menu-popup_active': isVisiblePopup,\n            })}\n          >\n            <UserMenuPopup handleVisiblePopup={handleVisiblePopup} />\n          </Wrapper>\n        </Wrapper>\n      )}\n    </header>\n  );\n});\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport './label.scss';\n\ninterface ILabel {\n  htmlFor?: string;\n  children?: React.ReactNode;\n  labelText?: string;\n  errorText?: string;\n  className?: string;\n}\n\nexport const Label: React.FC<ILabel> = ({ htmlFor, labelText, errorText, children, className }) => {\n  const classProps = classNames('label', {\n    [`${className}`]: className,\n    [`label_notification_error`]: errorText,\n  });\n\n  return (\n    <label htmlFor={htmlFor} className={classProps}>\n      {errorText ? errorText : labelText}\n      {children}\n    </label>\n  );\n};\n","export enum WindowSize {\n  SIZE_MOBILE_L = 425,\n  SIZE_TABLET_S = 550,\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Label } from '../../atoms/Label';\nimport { InputId, InputType } from '../FormInput/types/types';\nimport { IconName } from '../../atoms/Icon/types/types';\nimport { Icon } from '../../atoms/Icon';\nimport { Wrapper } from '../../atoms/Wrapper';\n\nimport './fileInput.scss';\n\ninterface IFileInput {\n  id: InputId;\n  uniqueKey: number;\n  errorText: string | undefined;\n  className: string;\n  field: {\n    name: string;\n    onBlur: () => void;\n    onChange: (e: File) => void;\n    value: { filename: string };\n  };\n  handleFileInputChange: (\n    event: { target: HTMLInputElement },\n    onChangeHandler: (e: File) => void\n  ) => void;\n}\n\nexport const FileInput: React.FC<IFileInput> = ({\n  id,\n  field,\n  uniqueKey,\n  errorText,\n  className,\n  handleFileInputChange,\n}): React.ReactElement => {\n  const classProps = classNames('file-input', {\n    [`${className}`]: className,\n  });\n\n  return (\n    <Wrapper className={classProps}>\n      <Label htmlFor={InputId.files} className=\"file-input__label\">\n        <Icon name={IconName.addFile} className=\"file-input__icon\" />\n        <input\n          type={InputType.file}\n          key={uniqueKey}\n          id={id}\n          {...field}\n          value={field.value.filename}\n          onChange={(event) => {\n            handleFileInputChange(event, field.onChange);\n          }}\n        />\n      </Label>\n      <Label errorText={errorText} className=\"file-input__label_error\" />\n    </Wrapper>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Label } from '../../atoms/Label';\nimport { Wrapper } from '../../atoms/Wrapper';\nimport { Icon } from '../../atoms/Icon';\nimport { ColorType, IconName } from '../../atoms/Icon/types/types';\nimport { InputSize, InputType } from './types/types';\n\nimport './formInput.scss';\n\ninterface IFormInput {\n  type: string;\n  placeholder?: string;\n  isRequired?: boolean;\n  isDisabled?: boolean;\n  labelText?: string;\n  errorText?: string;\n  className?: string;\n  size?: InputSize;\n  isAvailableAutoComplete?: boolean;\n  field: {\n    name: string;\n    onBlur: () => void;\n    onChange: React.ChangeEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n  };\n}\n\nexport const FormInput: React.FC<IFormInput> = ({\n  type,\n  placeholder = '',\n  labelText,\n  errorText,\n  className,\n  isRequired,\n  isDisabled,\n  size,\n  field,\n  isAvailableAutoComplete = true,\n}) => {\n  const classProps = classNames('form-field', {\n    [`${className}`]: className,\n    [`form-field_size_${size}`]: size,\n  });\n\n  const classPropsInput = classNames('form-field__input', {\n    ['form-field__input_notification_error']: errorText,\n  });\n\n  return (\n    <Wrapper className={classProps}>\n      <Label htmlFor={field.name} labelText={labelText} className=\"form-field__label\" />\n\n      <Wrapper className=\"form-field__inner\">\n        {type === InputType.textarea ? (\n          <textarea\n            required={isRequired}\n            className=\"form-field__textarea\"\n            placeholder={placeholder}\n            id={field.name}\n            {...field}\n          />\n        ) : (\n          <input\n            autoComplete={isAvailableAutoComplete ? 'on' : 'off'}\n            className={classPropsInput}\n            id={field.name}\n            placeholder={placeholder}\n            type={type}\n            disabled={isDisabled}\n            {...field}\n          />\n        )}\n\n        {errorText && (\n          <Icon className=\"form-field__icon\" color={ColorType.error} name={IconName.inputError} />\n        )}\n      </Wrapper>\n\n      {errorText && (\n        <Label\n          htmlFor={field.name}\n          errorText={errorText}\n          className=\"form-field__label_notification_error\"\n        />\n      )}\n    </Wrapper>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Wrapper } from '../../atoms/Wrapper';\nimport { ButtonIcon } from '../../molecules/ButtonIcon';\nimport { FileBlock } from '../../molecules/FileBlock';\nimport { ColorType, IconName } from '../../atoms/Icon/types/types';\nimport { ButtonType } from '../../atoms/Button/types/types';\nimport { IUseFileReader } from '../../../hooks/useFileReader';\n\nimport './filePreview.scss';\n\ninterface IFilePreview {\n  handleDeletePreviewFile: () => void;\n  previewFileState: IUseFileReader;\n}\n\nexport const FilePreview: React.FC<IFilePreview> = ({\n  previewFileState,\n  handleDeletePreviewFile,\n}) => {\n  const { isVisiblePreviewFile, fileInfo, handleSetIsVisiblePreview } = previewFileState;\n\n  return (\n    <Wrapper\n      className={classNames('preview', {\n        preview_active: isVisiblePreviewFile,\n      })}\n    >\n      <Wrapper className=\"preview__wrapper\" flex>\n        <FileBlock file={fileInfo} className=\"preview__file\" />\n\n        <Wrapper className=\"preview__buttons\">\n          <ButtonIcon\n            className={'preview__button'}\n            type={ButtonType.button}\n            iconName={IconName.closeCircleIcon}\n            color={ColorType.primary}\n            onClick={handleSetIsVisiblePreview}\n          />\n\n          <ButtonIcon\n            className={'preview__button'}\n            type={ButtonType.button}\n            iconName={IconName.deleteIcon}\n            color={ColorType.error}\n            onClick={handleDeletePreviewFile}\n          />\n        </Wrapper>\n      </Wrapper>\n    </Wrapper>\n  );\n};\n","import { useCallback, useState } from 'react';\n\nexport type FileInfoType = {\n  fileLink: string;\n  fileType: string;\n  fileSize: number;\n  fileName: string;\n};\n\nexport interface IUseFileReader {\n  fileInfo: FileInfoType;\n  isLoaded: boolean;\n  isVisiblePreviewFile: boolean;\n  uniqueKeyInput: number;\n  setFileInfo: (fileInfo: FileInfoType) => void;\n  handleSetIsVisiblePreview: () => void;\n  handleDeleteFile: () => void;\n  handleResetUniqueKey: () => void;\n}\n\nconst initialFileInfoState = {\n  fileLink: '',\n  fileType: '',\n  fileSize: 0,\n  fileName: '',\n};\n\nexport const useFileReader = (): [IUseFileReader, (file: File) => void] => {\n  const [isLoaded, setIsLoaded] = useState<boolean>(false);\n  const [fileInfo, setFileInfo] = useState<FileInfoType>(initialFileInfoState);\n  const [isVisiblePreviewFile, setIsVisiblePreviewFile] = useState<boolean>(false);\n  const [uniqueKeyInput, resetUniqueKeyInput] = useState<number>(Date.now());\n\n  const loadFile = useCallback((file: File) => {\n    const reader = new FileReader();\n    setIsVisiblePreviewFile(false);\n\n    reader.onload = function () {\n      setFileInfo({\n        fileLink: reader.result as string,\n        fileType: file.type,\n        fileSize: file.size,\n        fileName: file.name,\n      });\n      setIsLoaded(true);\n      setIsVisiblePreviewFile(true);\n    };\n\n    reader.readAsDataURL(file);\n  }, []);\n\n  const handleSetIsVisiblePreview = useCallback(() => {\n    setIsVisiblePreviewFile(!isVisiblePreviewFile);\n  }, [isVisiblePreviewFile]);\n\n  const handleDeleteFile = useCallback(() => {\n    setFileInfo(initialFileInfoState);\n    setIsVisiblePreviewFile(false);\n  }, []);\n\n  const handleResetUniqueKey = useCallback(() => {\n    resetUniqueKeyInput(Date.now());\n  }, []);\n\n  return [\n    {\n      fileInfo,\n      isLoaded,\n      isVisiblePreviewFile,\n      uniqueKeyInput,\n      setFileInfo,\n      handleSetIsVisiblePreview,\n      handleDeleteFile,\n      handleResetUniqueKey,\n    },\n    loadFile,\n  ];\n};\n","import { SUPPORTED_FORMATS } from '../components/organism/MessageForm/constants/constants';\n\nexport const validateFile = (\n  file: File\n): { isValid: boolean; isTypeError: boolean; isSizeError: boolean } => {\n  const isSizeError = file.size >= 2 * 1024 * 1024;\n\n  const isTypeError = ![\n    ...SUPPORTED_FORMATS.VIDEO,\n    ...SUPPORTED_FORMATS.AUDIO,\n    ...SUPPORTED_FORMATS.IMAGE,\n  ].includes(file.type);\n\n  return {\n    isValid: !isSizeError && !isTypeError,\n    isTypeError,\n    isSizeError,\n  };\n};\n","import React, { useCallback, useEffect, useRef } from 'react';\nimport classNames from 'classnames';\nimport { useForm, Controller, SubmitHandler, FieldValues } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { Wrapper } from '../../atoms/Wrapper';\nimport { Typography } from '../../atoms/Typography';\nimport { ButtonIcon } from '../../molecules/ButtonIcon';\nimport { FileInput } from '../../molecules/FileInput';\nimport { FormInput } from '../../molecules/FormInput';\nimport { ButtonType } from '../../atoms/Button/types/types';\nimport { ColorType, IconName } from '../../atoms/Icon/types/types';\nimport { InputId, InputType } from '../../molecules/FormInput/types/types';\nimport { URL, HTTP_PORT } from '../../../services/contants';\nimport { FilePreview } from '../FilePreview';\nimport { useFileReader } from '../../../hooks/useFileReader';\nimport { validateFile } from '../../../utils/validateFile';\nimport { MessageType } from '../../../store/types/types';\nimport { TypographyTypeStyle } from '../../atoms/Typography/types/types';\nimport { IFormInput, IMessageForm } from './types/types';\n\nimport './messageForm.scss';\n\nconst schema = yup.object().shape({\n  messageText: yup.string(),\n});\n\nexport const MessageForm: React.FC<IMessageForm> = ({\n  WSAction,\n  dialogStore,\n  currentUsername,\n  isFileLoading,\n}) => {\n  const [previewFileState, setPreviewFileState] = useFileReader();\n\n  const message = useRef<MessageType>({\n    text: '',\n    fromUser: '',\n    forUser: '',\n    file: {\n      fileLink: '',\n      fileType: '',\n      fileSize: 0,\n      fileName: '',\n    },\n    createdAt: null,\n  });\n\n  const {\n    handleSubmit,\n    control,\n    reset,\n    clearErrors,\n    setError,\n    formState: { errors, isValid, isSubmitSuccessful },\n  } = useForm<FieldValues>({\n    mode: 'onChange',\n    resolver: yupResolver(schema),\n    defaultValues: {\n      messageText: '',\n      files: [],\n    },\n  });\n\n  const fileErrors = errors.files?.message || dialogStore.currentDialogError;\n\n  const handleDeletePreviewFile = useCallback(() => {\n    previewFileState.handleDeleteFile();\n    previewFileState.handleResetUniqueKey();\n    reset({ files: [] });\n  }, [previewFileState, reset]);\n\n  const onSubmit: SubmitHandler<IFormInput> = async (data) => {\n    const formData = new FormData();\n\n    message.current = {\n      text: data.messageText,\n      fromUser: currentUsername,\n      forUser: dialogStore.currentDialogInfo.companion.username,\n      createdAt: Date.now(),\n    };\n\n    if (data.files?.name) {\n      const { name: fileName, size: fileSize, type: fileType } = data.files;\n\n      formData.append('0', data.files, data.files.name);\n      const fileLink = await dialogStore.sendMessageFile<string>(formData, '/upload');\n\n      if (fileLink) {\n        message.current.file = {\n          fileLink: `${URL}:${HTTP_PORT}${fileLink}`,\n          fileType,\n          fileSize,\n          fileName,\n        };\n      }\n    }\n\n    if (message.current.text || message.current.file) {\n      WSAction.sendMessage(`'${JSON.stringify(message.current)}'`);\n    }\n  };\n\n  const handleFileInputChange = useCallback(\n    (event: { target: HTMLInputElement }, onChangeHandler: (e: File) => void) => {\n      if (event.target.files?.length) {\n        const file = event.target.files[0];\n        if (validateFile(file).isValid) {\n          setPreviewFileState(file);\n          onChangeHandler(file);\n        }\n\n        validateFile(file).isSizeError &&\n          setError('files', { type: 'fileError', message: 'Размер файла должен быть меньше 2 мб' });\n\n        validateFile(file).isTypeError &&\n          setError('files', { type: 'fileError', message: `Данный тип не поддерживается` });\n      }\n    },\n    [setPreviewFileState, setError]\n  );\n\n  useEffect(() => {\n    if (isSubmitSuccessful) {\n      handleDeletePreviewFile();\n\n      reset({ files: [], messageText: '' });\n      message.current = {\n        text: '',\n        fromUser: '',\n        forUser: '',\n        createdAt: null,\n      };\n    }\n  }, [isSubmitSuccessful, previewFileState, handleDeletePreviewFile, reset]);\n\n  useEffect(() => {\n    if (fileErrors) {\n      () => previewFileState.handleResetUniqueKey();\n\n      setTimeout(() => {\n        clearErrors('files');\n        dialogStore.clearError();\n        previewFileState.handleResetUniqueKey();\n      }, 1000);\n    }\n  }, [clearErrors, previewFileState, fileErrors, dialogStore]);\n\n  return (\n    <form className=\"message-form\" onSubmit={handleSubmit(onSubmit)}>\n      <Wrapper className=\"message-form__preview-block\">\n        <FilePreview\n          previewFileState={previewFileState}\n          handleDeletePreviewFile={handleDeletePreviewFile}\n        />\n      </Wrapper>\n\n      {previewFileState.fileInfo.fileName && (\n        <ButtonIcon\n          className={classNames('message-form__preview-button', {\n            'message-form__preview-button_active': !previewFileState.isVisiblePreviewFile,\n          })}\n          iconName={IconName.arrowDown}\n          type={ButtonType.button}\n          onClick={previewFileState.handleSetIsVisiblePreview}\n        />\n      )}\n\n      <Wrapper flex align=\"center\" className=\"message-form__inner\">\n        <Controller\n          name={InputId.files}\n          control={control}\n          render={({ field }) => (\n            <FileInput\n              id={InputId.files}\n              className=\"message-form__file-input\"\n              field={field}\n              handleFileInputChange={handleFileInputChange}\n              uniqueKey={previewFileState.uniqueKeyInput}\n              errorText={fileErrors}\n            />\n          )}\n        />\n\n        <Controller\n          name={InputId.messageText}\n          control={control}\n          render={({ field }) => (\n            <FormInput placeholder=\"Write something...\" type={InputType.textarea} field={field} />\n          )}\n        />\n\n        <Typography\n          variant={TypographyTypeStyle.span}\n          className={classNames('message-form__tooltip', {\n            'message-form__tooltip_active': isFileLoading,\n          })}\n        >\n          Идет отправка файла...\n        </Typography>\n\n        <ButtonIcon\n          iconName={isFileLoading ? IconName.spinnerCircle : IconName.sendMessage}\n          type={ButtonType.submit}\n          color={ColorType.primary}\n          className=\"message-form__button\"\n          isDisabled={!isValid || isFileLoading}\n        />\n      </Wrapper>\n    </form>\n  );\n};\n","import { UserGender } from '../components/atoms/Avatar/types/types';\nimport { IconName } from '../components/atoms/Icon/types/types';\n\nexport const checkUserAvatar = (gender: string | undefined): string => {\n  if (gender === UserGender.male) return IconName.maleAvatar;\n  if (gender === UserGender.female) return IconName.femaleAvatar;\n\n  return IconName.noUserAvatar;\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Icon } from '../Icon';\nimport { AvatarSize } from './types/types';\nimport { checkUserAvatar } from '../../../utils/checkUserAvatar';\n\nimport './avatar.scss';\n\ninterface IAvatar {\n  size: AvatarSize;\n  gender: string;\n  className?: string;\n}\n\nexport const Avatar: React.FC<IAvatar> = ({ size, gender, className }) => {\n  const classProps = classNames('avatar', {\n    [`avatar_size_${size}`]: size,\n    [`${className}`]: className,\n  });\n  return <Icon className={classProps} name={checkUserAvatar(gender)} />;\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Avatar } from '../../atoms/Avatar';\nimport { Typography } from '../../atoms/Typography';\nimport { Wrapper } from '../../atoms/Wrapper';\nimport { TypographyTypeStyle } from '../../atoms/Typography/types/types';\nimport { AvatarSize } from '../../atoms/Avatar/types/types';\n\nimport './userStatus.scss';\n\ninterface IUserStatus {\n  username: string;\n  userStatus: string;\n  gender: string;\n  className?: string;\n}\n\nexport const UserStatus: React.FC<IUserStatus> = ({ username, userStatus, gender, className }) => {\n  const classProps = classNames('user-status', {\n    [`${className}`]: className,\n  });\n\n  return (\n    <Wrapper flex row className={classProps}>\n      <Avatar size={AvatarSize.small} gender={gender} className=\"user-status__avatar\" />\n      <Wrapper flex column>\n        <Typography variant={TypographyTypeStyle.h3} className=\"user-status__username\">\n          {username}\n        </Typography>\n        <Typography variant={TypographyTypeStyle.p1} className=\"user-status__last-seen\">\n          {userStatus}\n        </Typography>\n      </Wrapper>\n    </Wrapper>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Wrapper } from '../../atoms/Wrapper';\nimport { ButtonIcon } from '../../molecules/ButtonIcon';\nimport { UserStatus } from '../../molecules/UserStatus';\nimport { ButtonType } from '../../atoms/Button/types/types';\nimport { ColorType, IconName } from '../../atoms/Icon/types/types';\n\nimport './statusBar.scss';\n\ninterface IStatusBar {\n  isVisibleUserList: boolean;\n  dialogInfo: { username: string; gender: string; lastSeen: string };\n  handleVisibleUserList: () => void;\n}\n\nexport const StatusBar: React.FC<IStatusBar> = ({\n  isVisibleUserList,\n  dialogInfo,\n  handleVisibleUserList,\n}) => {\n  return (\n    <Wrapper flex align=\"center\" className=\"status-bar\">\n      <ButtonIcon\n        iconName={isVisibleUserList ? IconName.closeIcon : IconName.userList}\n        type={ButtonType.button}\n        color={ColorType.primary}\n        onClick={handleVisibleUserList}\n        className={classNames('status-bar__user-list-icon', {\n          ['status-bar__user-list-icon_transform']: isVisibleUserList,\n        })}\n      />\n\n      <ButtonIcon\n        iconName={IconName.arrowLeft}\n        type={ButtonType.button}\n        color={ColorType.primary}\n        onClick={() => history.back()}\n        className={'status-bar__back-icon'}\n      />\n\n      <UserStatus\n        className=\"status-bar__user-status\"\n        username={dialogInfo.username}\n        userStatus={dialogInfo.lastSeen}\n        gender={dialogInfo.gender}\n      />\n    </Wrapper>\n  );\n};\n","import { MessageType } from '../store/types/types';\nimport { SUPPORTED_FORMATS } from '../components/organism/MessageForm/constants/constants';\n\nexport const formatLastUserMessage = (lastMessage: MessageType | undefined): string | undefined => {\n  const fileType = lastMessage?.file?.fileType;\n\n  if (fileType) {\n    if (SUPPORTED_FORMATS.VIDEO.includes(fileType)) {\n      return `Video file`;\n    }\n\n    if (SUPPORTED_FORMATS.AUDIO.includes(fileType)) {\n      return `Audio file`;\n    }\n\n    return `Image file`;\n  }\n  return lastMessage?.text;\n};\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { Avatar } from '../../atoms/Avatar';\nimport { Typography } from '../../atoms/Typography';\nimport { UserGender, AvatarSize } from '../../atoms/Avatar/types/types';\nimport { Wrapper } from '../../atoms/Wrapper';\nimport { ColorType } from '../../atoms/Icon/types/types';\nimport { TypographyTypeStyle } from '../../atoms/Typography/types/types';\nimport { SCREENS } from '../../../router/endpoints';\nimport { MessageType } from '../../../store/types/types';\nimport { formatLastUserMessage } from '../../../utils/formatLastUserMessage';\n\nimport './userListItem.scss';\n\nexport interface IUserListItem {\n  name: string;\n  gender: UserGender;\n  id: string;\n  setDialogInfo: (username: string, lastseen: string, gender: UserGender) => void;\n  handleVisibleUserList: () => void;\n  isCurrentUserLastMessage?: boolean;\n  lastMessage?: MessageType;\n}\n\nexport const UserListItem = React.memo(function UserListItem({\n  name,\n  gender,\n  id,\n  lastMessage,\n  setDialogInfo,\n  handleVisibleUserList,\n}: IUserListItem) {\n  const isCurrentUserLastMessage = lastMessage?.forUser === name;\n\n  return (\n    <NavLink\n      to={`${SCREENS.SCREEN_DIALOGS}/${id}`}\n      className=\"user-list__link\"\n      activeClassName=\"user-list__link_active\"\n      onClick={() => {\n        handleVisibleUserList();\n        setDialogInfo(name, 'Last seen recently', gender);\n      }}\n    >\n      <Avatar size={AvatarSize.medium} gender={gender} className=\"link__avatar\" />\n      <Wrapper className=\"link__info\">\n        <Typography variant={TypographyTypeStyle.h4} className={'link__username'}>\n          {name}\n        </Typography>\n        <Typography variant={TypographyTypeStyle.p2} className={'link__last-message'}>\n          {isCurrentUserLastMessage && (\n            <Typography variant={TypographyTypeStyle.span} color={ColorType.primary}>\n              You:{' '}\n            </Typography>\n          )}\n          {formatLastUserMessage(lastMessage)}\n        </Typography>\n      </Wrapper>\n    </NavLink>\n  );\n});\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Avatar } from '../../atoms/Avatar';\nimport { Typography } from '../../atoms/Typography';\nimport { TypographyTypeStyle } from '../../atoms/Typography/types/types';\nimport { AvatarSize, UserGender } from '../../atoms/Avatar/types/types';\n\nimport './userListNotification.scss';\n\ninterface IUserListNotification {\n  className: string;\n}\n\nexport const UserListNotification: React.FC<IUserListNotification> = ({ className }) => {\n  const classProps = classNames('no-user-block', {\n    [`${className}`]: className,\n  });\n  return (\n    <div className={classProps}>\n      <Avatar size={AvatarSize.large} gender={UserGender.noGender} />\n      <Typography variant={TypographyTypeStyle.p2} className=\"no-user-block__text\">\n        There is no other users yet\n      </Typography>\n    </div>\n  );\n};\n","import React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport classNames from 'classnames';\nimport { IUserListItem, UserListItem } from '../../molecules/UserListItem';\nimport { UserListNotification } from '../../molecules/UserListNotification';\nimport { Spinner } from '../../molecules/Spinner';\nimport { UserGender } from '../../atoms/Avatar/types/types';\nimport { MessageType } from '../../../store/types/types';\n\nimport './userList.scss';\n\ninterface IUserList {\n  isVisibleUserList: boolean;\n  users: IUserListItem[];\n  isLoaded: boolean;\n  getLastMessage: (id: string) => MessageType | undefined;\n  handleVisibleUserList: () => void;\n  setDialogInfo: (username: string, lastseen: string, gender: UserGender) => void;\n}\n\nexport const UserList: React.FC<IUserList> = observer(\n  ({\n    isVisibleUserList,\n    users,\n    isLoaded,\n    setDialogInfo,\n    getLastMessage,\n    handleVisibleUserList,\n  }): React.ReactElement => {\n    const classProps = classNames('user-list', {\n      ['user-list_active']: isVisibleUserList,\n    });\n\n    return (\n      <div className={classProps}>\n        {isLoaded ? (\n          users.length ? (\n            users.map((user, index) => (\n              <UserListItem\n                handleVisibleUserList={handleVisibleUserList}\n                setDialogInfo={setDialogInfo}\n                key={`${user.name}_${index}`}\n                id={`${user.name}_${index}`}\n                name={user.name}\n                gender={user.gender}\n                lastMessage={getLastMessage(user.name)}\n                isCurrentUserLastMessage={user.isCurrentUserLastMessage}\n              />\n            ))\n          ) : (\n            <UserListNotification className=\"user-list__no-user-block\" />\n          )\n        ) : (\n          <Spinner className=\"user-list__spinner\" />\n        )}\n      </div>\n    );\n  }\n);\n","import React, { useContext } from 'react';\nimport { Typography } from '../../atoms/Typography';\nimport { TypographyTypeStyle } from '../../atoms/Typography/types/types';\nimport { Wrapper } from '../../atoms/Wrapper';\nimport { Button } from '../../atoms/Button';\nimport { ButtonType, ButtonVariant } from '../../atoms/Button/types/types';\nimport { RootStoreContext } from '../../../store/RootStore';\n\nimport './modal.scss';\n\ninterface IModal {\n  notificationText?: string;\n  isError?: boolean;\n}\n\nexport const Modal: React.FC<IModal> = ({ notificationText, isError }) => {\n  const { userStore } = useContext(RootStoreContext);\n\n  const handleButtonClick = () => {\n    userStore.clearUserInfo();\n  };\n\n  return (\n    <Wrapper className={'modal'}>\n      <Wrapper className=\"modal__wrapper\">\n        <Typography variant={TypographyTypeStyle.h3} className=\"modal__header-text\">\n          Похоже что-то пошло не так...\n        </Typography>\n\n        <Typography variant={TypographyTypeStyle.p1} className=\"modal__info-text\">\n          Попытка подключения завершилась неудачно, текст ошибки :\n          <Typography variant={TypographyTypeStyle.span} className=\"modal__error-text\">\n            {notificationText === 'error' ? 'Проверьте подключение к сети' : notificationText}\n          </Typography>\n        </Typography>\n\n        <Typography variant={TypographyTypeStyle.p1} className=\"modal__info-text\">\n          Пожалуйста, вернитесь на страницу авторизации и попробуйте войти снова.\n        </Typography>\n\n        <Button\n          type={ButtonType.button}\n          variant={ButtonVariant.notification}\n          className=\"modal__button\"\n          onClick={handleButtonClick}\n        >\n          На страницу авторизации\n        </Button>\n      </Wrapper>\n    </Wrapper>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport './mainContainer.scss';\n\ninterface IMainContainer {\n  page?: string;\n}\n\nexport const MainContainer: React.FC<IMainContainer> = ({ children, page }) => {\n  const classProps = classNames('main-container', {\n    [`${page}-page__main-container`]: page,\n  });\n\n  return <main className={classProps}>{children}</main>;\n};\n","export enum SIGN_UP_FIELDS {\n  login = 'login',\n  password = 'password',\n  passwordConfirm = 'password_confirm',\n  nickname = 'name',\n  gender = 'gender_id',\n  captcha = 'captcha',\n}\n","import React from 'react';\nimport { useRouteMatch } from 'react-router';\nimport { Wrapper } from '../../atoms/Wrapper';\nimport { MainContainer } from '../MainContainer';\nimport { Pages, SCREENS } from '../../../router/endpoints';\nimport { useWindowSize } from '../../../hooks/useWindowSize';\nimport { WindowSize } from '../../../hooks/constants';\n\nimport './chatPageTemplate.scss';\n\ninterface IChatPageTemplate {\n  isLoadedDialogInfo: boolean;\n  header?: React.ReactElement;\n  userList?: React.ReactElement;\n  statusBar?: React.ReactElement;\n  dialog?: React.ReactElement;\n  messageForm?: React.ReactElement;\n  notificationButton?: React.ReactElement;\n  errorModal?: React.ReactElement;\n  spinner?: React.ReactElement;\n}\n\nexport const ChatPageTemplate: React.FC<IChatPageTemplate> = ({\n  isLoadedDialogInfo,\n  header,\n  userList,\n  statusBar,\n  dialog,\n  messageForm,\n  notificationButton,\n  errorModal,\n  spinner,\n}): React.ReactElement | null => {\n  const size = useWindowSize();\n  const isCurrentDialogPage = useRouteMatch(`${SCREENS.SCREEN_CURRENT_DIALOG}`);\n  const isDialogsPage = useRouteMatch(`${SCREENS.SCREEN_DIALOGS}`);\n\n  return (\n    <MainContainer page={Pages.chat}>\n      {errorModal}\n      {(size.width > WindowSize.SIZE_TABLET_S || isDialogsPage?.isExact) && header}\n\n      <main className=\"chat-page__inner\">\n        {(size.width > WindowSize.SIZE_TABLET_S || isDialogsPage?.isExact) && userList}\n\n        <Wrapper className=\"chat-page__dialog\">\n          {isLoadedDialogInfo ? (\n            isCurrentDialogPage ? (\n              <>\n                {statusBar}\n                {dialog}\n                {messageForm}\n              </>\n            ) : (\n              notificationButton\n            )\n          ) : (\n            <Wrapper className=\"chat-page__spinner\">{spinner}</Wrapper>\n          )}\n        </Wrapper>\n      </main>\n    </MainContainer>\n  );\n};\n","import { useEffect, useState } from 'react';\n\ntype WindowSizeType = {\n  width: number;\n};\n\nexport function useWindowSize(): WindowSizeType {\n  const [windowSize, setWindowSize] = useState<WindowSizeType>({ width: 0 });\n\n  useEffect(() => {\n    function handleWindowResize() {\n      setWindowSize({ width: window.innerWidth });\n    }\n\n    window.addEventListener('resize', handleWindowResize);\n    handleWindowResize();\n    return () => window.removeEventListener('resize', handleWindowResize);\n  }, []);\n\n  return windowSize;\n}\n","import React, { useEffect, useContext, useState } from 'react';\nimport { useHistory, useParams } from 'react-router';\nimport { observer } from 'mobx-react-lite';\nimport { Button } from '../../components/atoms/Button';\nimport { Dialog } from '../../components/organism/Dialog';\nimport { Header } from '../../components/organism/Header';\nimport { MessageForm } from '../../components/organism/MessageForm';\nimport { StatusBar } from '../../components/organism/StatusBar';\nimport { UserList } from '../../components/organism/UserList';\nimport { UserGender } from '../../components/atoms/Avatar/types/types';\nimport { Modal } from '../../components/organism/Modal';\nimport { Spinner } from '../../components/molecules/Spinner';\nimport { ChatPageTemplate } from '../../components/templates/ChatPageTemplate';\nimport { RootStoreContext } from '../../store/RootStore';\nimport { LOADING_STATE, MessageType } from '../../store/types/types';\nimport { ButtonType, ButtonVariant } from '../../components/atoms/Button/types/types';\nimport { useWebsocket } from '../../hooks/useWebsocket';\nimport { SCREENS } from '../../router/endpoints';\n\ntype ParamsType = {\n  id: string | undefined;\n};\n\nexport const ChatPage = observer((): React.ReactElement => {\n  const [isVisibleUserList, setIsVisibleUserList] = useState<boolean>(false);\n  const params = useParams<ParamsType>();\n  const history = useHistory();\n  const [wsState, WSAction] = useWebsocket('general_channel');\n  const {\n    userListStore,\n    dialogStore,\n    userStore: {\n      userInfo: { username: currentUsername, gender: currentUserGender },\n    },\n  } = useContext(RootStoreContext);\n\n  const messages = dialogStore.getDialogInfo(dialogStore.currentDialogId);\n\n  const handleVisibleUserList = React.useCallback(() => {\n    setIsVisibleUserList(!isVisibleUserList);\n  }, [isVisibleUserList]);\n\n  const setDialogInfo = React.useCallback(\n    (username: string, lastseen: string, gender: UserGender) => {\n      const currentDialogId = [currentUsername, username].sort().toString();\n      dialogStore.setCurrentDialogInfo(username, lastseen, currentDialogId, gender);\n    },\n\n    [dialogStore, currentUsername]\n  );\n\n  const getLastMessage = React.useCallback(\n    (id: string): MessageType | undefined => {\n      const currentDialogId = [currentUsername, id].sort().toString();\n      const messages = dialogStore.getDialogInfo(currentDialogId);\n\n      if (messages) {\n        return messages.dialogMessages[messages.dialogMessages?.length - 1];\n      }\n    },\n    [currentUsername, dialogStore]\n  );\n\n  useEffect(() => {\n    const { id } = params;\n    if (id && userListStore.loadingState === LOADING_STATE.LOADED) {\n      const currentCompanion = userListStore.userList.find(\n        (user) => user.name === id.slice(0, id.lastIndexOf('_'))\n      );\n      currentCompanion?.name\n        ? setDialogInfo(currentCompanion.name, 'Last seen recently', currentCompanion.gender)\n        : history.push(SCREENS.SCREEN_DIALOGS);\n    }\n  }, [params, setDialogInfo, history, userListStore.loadingState, userListStore.userList]);\n\n  useEffect(() => {\n    if (wsState.isOpen) {\n      WSAction.fetchUserData();\n      WSAction.fetchUserList();\n      dialogStore.setDialogList();\n    }\n  }, [WSAction, wsState.isOpen, dialogStore]);\n\n  useEffect(() => {\n    if (wsState.isOpen && currentUsername) {\n      WSAction.sendUserJoinedInfo(currentUsername, currentUserGender);\n    }\n  }, [WSAction, wsState.isOpen, currentUsername, currentUserGender]);\n\n  return (\n    <>\n      <ChatPageTemplate\n        isLoadedDialogInfo={userListStore.loadingState === 'LOADED'}\n        errorModal={wsState.error ? <Modal isError notificationText={wsState.error} /> : undefined}\n        header={<Header isChatPage />}\n        userList={\n          <UserList\n            getLastMessage={getLastMessage}\n            setDialogInfo={setDialogInfo}\n            users={userListStore.userList}\n            isLoaded={userListStore.loadingState === LOADING_STATE.LOADED}\n            handleVisibleUserList={handleVisibleUserList}\n            isVisibleUserList={isVisibleUserList}\n          />\n        }\n        statusBar={\n          <StatusBar\n            isVisibleUserList={isVisibleUserList}\n            handleVisibleUserList={handleVisibleUserList}\n            dialogInfo={dialogStore.currentDialogInfo.companion}\n          />\n        }\n        dialog={\n          <Dialog dialogMessages={messages?.dialogMessages} currentUsername={currentUsername} />\n        }\n        messageForm={\n          <MessageForm\n            dialogStore={dialogStore}\n            currentUsername={currentUsername}\n            WSAction={WSAction}\n            isFileLoading={dialogStore.loadingState === LOADING_STATE.PENDING}\n          />\n        }\n        spinner={<Spinner />}\n        notificationButton={\n          <Button\n            variant={ButtonVariant.notification}\n            type={ButtonType.button}\n            className=\"chat-page__button_notification\"\n            onClick={handleVisibleUserList}\n          >\n            Select a chat to start messaging\n          </Button>\n        }\n      />\n    </>\n  );\n});\n","import { useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { RootStoreContext } from '../store/RootStore';\nimport { webSocketMessage, WS_API } from '../services/contants';\nimport { IWSAction, WebSocketMessageType } from '../services/types';\n\ntype Result<T> = T | undefined;\n\ninterface IWSState<T> {\n  result: Result<T>;\n  error: string;\n  isOpen: boolean;\n  isClosed: boolean;\n}\n\nexport const useWebsocket = <T = Record<string, unknown>>(\n  type: string\n): [IWSState<T>, IWSAction] => {\n  const { userStore, userListStore, dialogStore } = useContext(RootStoreContext);\n  const ws = useRef<WebSocket | null>();\n\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const [error, setError] = useState<string>('');\n  const [result, setResult] = useState<Result<T>>();\n  const [isClosed, setIsClosed] = useState<boolean>(false);\n\n  const accessToken = userStore.tokens.accessToken;\n\n  const params = `/?type=${type}&ws_id=`;\n\n  useEffect(() => {\n    if (accessToken) {\n      ws.current = new WebSocket(`${WS_API}${params}${accessToken}`);\n    }\n\n    return () => {\n      ws.current?.send('closed1');\n      setIsClosed(true);\n      ws.current?.close();\n    };\n  }, [accessToken, params]);\n\n  useEffect(() => {\n    if (!ws.current) return;\n    ws.current.onopen = () => {\n      setIsOpen(true);\n    };\n\n    ws.current.onerror = (event: Event) => {\n      setError(event.type);\n    };\n\n    ws.current.onclose = () => {\n      ws.current?.send('closed2');\n\n      setIsClosed(true);\n      ws.current?.close();\n    };\n\n    if (ws.current) {\n      ws.current.onmessage = (event: MessageEvent) => {\n        if (event.data.includes(`Get param 'ws_id' - is wrong! Please relogin!`)) {\n          return setError(event.data);\n        }\n\n        const reverseData = event.data.replaceAll(\"'\", '');\n        const { type: eventType, ...wsResponse } = JSON.parse(reverseData);\n\n        if (eventType === WebSocketMessageType.sendMessage) {\n          dialogStore.updateCurrentDialogMessages(JSON.parse(wsResponse.data.message));\n        }\n\n        if (eventType === WebSocketMessageType.usersList) {\n          userListStore.setUserList(wsResponse.data);\n        }\n\n        if (eventType === WebSocketMessageType.userData) {\n          userStore.setCurrentUserInfo(wsResponse.data);\n        }\n\n        if (eventType === WebSocketMessageType.sendUserJoinedInfo) {\n          if (!userListStore.userList.find((user) => user.name === wsResponse.data.name)) {\n            userListStore.updateUserList(wsResponse.data);\n          }\n        }\n\n        setResult(wsResponse.data);\n      };\n    }\n  }, [userListStore, userStore, dialogStore]);\n\n  const send = (messageType: WebSocketMessageType, data?: Record<string, unknown>) => {\n    if (\n      messageType === WebSocketMessageType.sendMessage ||\n      messageType === WebSocketMessageType.sendUserJoinedInfo ||\n      messageType === WebSocketMessageType.sendUserLogoutInfo\n    ) {\n      return ws.current?.send(`'${JSON.stringify({ type: messageType, data })}'`);\n    }\n\n    return ws.current?.send(JSON.stringify({ type: messageType, ...data }));\n  };\n\n  const WSAction = useMemo(() => {\n    const fetchUserList = () => webSocketMessage.fetchUserList(send);\n    const fetchUserData = () => webSocketMessage.fetchUserData(send);\n    const sendMessage = (text: string) => webSocketMessage.sendMessage(send, text);\n    const sendUserJoinedInfo = (username: string, gender: string) =>\n      webSocketMessage.sendUserJoinedInfo(send, username, gender);\n\n    return { fetchUserList, fetchUserData, sendMessage, sendUserJoinedInfo };\n  }, []);\n\n  return [{ isOpen, error, result, isClosed }, WSAction];\n};\n","import { URL_API } from './contants';\n\nexport const fetchApi = {\n  fetchCaptcha: async (\n    setCaptchaURL: (captchaURL: string) => void,\n    setIsLoaded: (isLoaded: boolean) => void\n  ): Promise<void> => {\n    setIsLoaded(false);\n    setCaptchaURL('');\n\n    try {\n      await fetch(`${URL_API}/auth/captcha?t=${Date.now()}`).then((res) => {\n        if (res.status === 200) {\n          setCaptchaURL(res.url);\n        }\n      });\n    } catch (e) {\n      setCaptchaURL('');\n    } finally {\n      setIsLoaded(true);\n    }\n  },\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { Wrapper } from '../../atoms/Wrapper';\nimport { ButtonIcon } from '../ButtonIcon';\nimport { ButtonType } from '../../atoms/Button/types/types';\nimport { ColorType, IconName } from '../../atoms/Icon/types/types';\nimport { Spinner } from '../Spinner';\nimport { fetchApi } from '../../../services/api';\n\nimport './captchaBlock.scss';\n\nexport const CaptchaBlock = React.memo(function CaptchaBlock(): React.ReactElement {\n  const [captchaURL, setCaptchaURL] = useState<string>('');\n  const [isLoaded, setIsLoaded] = useState<boolean>(false);\n\n  const handlerCaptchaURL = useCallback(() => {\n    fetchApi.fetchCaptcha(setCaptchaURL, setIsLoaded);\n  }, []);\n\n  useEffect(() => {\n    handlerCaptchaURL();\n  }, [handlerCaptchaURL]);\n\n  return (\n    <Wrapper flex align=\"center\" className=\"captcha-block\">\n      {isLoaded ? (\n        !captchaURL ? (\n          <span>Failed to fetch captcha</span>\n        ) : (\n          <img src={`${captchaURL}`} alt=\"captcha\" />\n        )\n      ) : (\n        <Spinner className=\"captcha-block__spinner\" />\n      )}\n\n      <ButtonIcon\n        className=\"captcha-block__button\"\n        iconName={IconName.updateIcon}\n        color={ColorType.primary}\n        type={ButtonType.button}\n        onClick={handlerCaptchaURL}\n        arialabel=\"Refresh captcha\"\n      />\n    </Wrapper>\n  );\n});\n","import { SIGN_UP_FIELDS } from './constants';\n\nexport const convertDataToFormData = (data: Record<string, string>): FormData => {\n  const formData = new FormData();\n\n  formData.append(SIGN_UP_FIELDS.login, data.login);\n  formData.append(SIGN_UP_FIELDS.password, data.password);\n  formData.append(SIGN_UP_FIELDS.captcha, data.captcha);\n\n  data.passwordConfirm && formData.append(SIGN_UP_FIELDS.passwordConfirm, data.passwordConfirm);\n  data.nickname && formData.append(SIGN_UP_FIELDS.nickname, data.nickname);\n  data.gender && formData.append(SIGN_UP_FIELDS.gender, data.gender);\n\n  return formData;\n};\n","import { FieldValues, UseFormSetError } from 'react-hook-form';\nimport { ISignUpFormField } from '../components/organism/SignUpForm';\nimport { SIGN_UP_FIELDS } from './constants';\n\nexport const defineFieldError = (\n  errorText: string,\n  setError: UseFormSetError<FieldValues | ISignUpFormField>\n): void => {\n  for (const field in SIGN_UP_FIELDS) {\n    errorText.match(SIGN_UP_FIELDS.gender) &&\n      setError('gender', { message: 'Something wrong with this field' });\n\n    errorText.match(SIGN_UP_FIELDS.password) &&\n      setError('passwordConfirm', { message: 'Something wrong with this field' });\n\n    errorText.match(SIGN_UP_FIELDS.nickname) &&\n      setError('nickname', { message: 'Your name must be less than 50 letters' });\n\n    if (errorText.match(field)) {\n      setError(field, { message: errorText });\n    }\n  }\n};\n","import React, { useEffect } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { useForm, Controller, SubmitHandler, FieldValues } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { RootStoreContext } from '../../../store/RootStore';\nimport { Button } from '../../atoms/Button';\nimport { Typography } from '../../atoms/Typography';\nimport { Wrapper } from '../../atoms/Wrapper';\nimport { CaptchaBlock } from '../../molecules/CaptchaBlock';\nimport { FormInput } from '../../molecules/FormInput';\nimport { ButtonSize, ButtonType, ButtonVariant } from '../../atoms/Button/types/types';\nimport { InputId, InputSize, InputType } from '../../molecules/FormInput/types/types';\nimport { TypographyTypeStyle } from '../../atoms/Typography/types/types';\nimport { convertDataToFormData } from '../../../utils/convertDataToFormData';\nimport { defineFieldError } from '../../../utils/defineFieldError';\nimport { SCREENS } from '../../../router/endpoints';\n\nimport './loginForm.scss';\n\ninterface IFormInput {\n  login: string;\n  password: string;\n  captcha: string;\n}\n\nconst schema = yup.object().shape({\n  login: yup\n    .string()\n    .min(2, 'Your name must contain at least 2 letters')\n    .max(25, 'Your name must be less than 50 letters')\n    .required('Please input your name'),\n  password: yup.string().required('Please input your password'),\n  captcha: yup\n    .string()\n    .min(5, 'Min 5 symbols')\n    .max(5, 'Max 5 symbols')\n    .required('Please input captcha'),\n});\n\nexport const LoginForm = observer((): React.ReactElement => {\n  const { userStore } = React.useContext(RootStoreContext);\n\n  const {\n    handleSubmit,\n    control,\n    setError,\n    formState: { errors, isValid, isSubmitSuccessful },\n  } = useForm<FieldValues>({\n    mode: 'onChange',\n    resolver: yupResolver(schema),\n    defaultValues: {\n      login: '',\n      password: '',\n      captcha: '',\n    },\n  });\n\n  const onSubmit: SubmitHandler<IFormInput> = async (formData) => {\n    const accessToken = await userStore.sendUserAuthData<string>(\n      convertDataToFormData(formData),\n      '/auth/login'\n    );\n\n    accessToken && userStore.setAccessToken(accessToken);\n  };\n\n  useEffect(() => {\n    if (userStore.userAuthDataError && isSubmitSuccessful) {\n      defineFieldError(userStore.userAuthDataError, setError);\n    }\n  }, [setError, userStore, isSubmitSuccessful, userStore.userAuthDataError]);\n\n  return (\n    <Wrapper className=\"form-login\">\n      <Typography className=\"form-login__text\" variant={TypographyTypeStyle.h2}>\n        Please, autorize yourself\n      </Typography>\n\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Controller\n          name={InputId.login}\n          control={control}\n          render={({ field }) => (\n            <FormInput\n              placeholder={'User name'}\n              type={InputType.text}\n              labelText=\"User name\"\n              className=\"form-login__input\"\n              field={field}\n              errorText={errors.login?.message}\n            />\n          )}\n        />\n\n        <Controller\n          name={InputId.password}\n          control={control}\n          render={({ field }) => (\n            <FormInput\n              placeholder={'Input password'}\n              type={InputType.password}\n              labelText=\"Password\"\n              className=\"form-login__input\"\n              field={field}\n              errorText={errors.password?.message}\n            />\n          )}\n        />\n\n        <Wrapper flex className=\"form-login__security-code\">\n          <Controller\n            name={InputId.captcha}\n            control={control}\n            render={({ field }) => (\n              <FormInput\n                placeholder={'Security code'}\n                type={InputType.text}\n                labelText=\"Security code\"\n                className=\"form-login__input\"\n                field={field}\n                size={InputSize.medium}\n                errorText={errors.captcha?.message}\n              />\n            )}\n          />\n          <CaptchaBlock />\n        </Wrapper>\n\n        <Wrapper flex className=\"form-login__buttons\">\n          <Button\n            className=\"form-login__button\"\n            variant={ButtonVariant.primary}\n            size={ButtonSize.medium}\n            type={ButtonType.submit}\n            isDisabled={!isValid}\n          >\n            Log in\n          </Button>\n\n          <Button\n            className=\"form-login__button\"\n            variant={ButtonVariant.outline}\n            size={ButtonSize.medium}\n            type={ButtonType.button}\n            isNavLink\n            path={SCREENS.SCREEN_SIGN_UP}\n          >\n            Registration\n          </Button>\n        </Wrapper>\n      </form>\n    </Wrapper>\n  );\n});\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { UseFormClearErrors, UseFormSetValue } from 'react-hook-form';\nimport { Label } from '../../atoms/Label';\nimport { Typography } from '../../atoms/Typography';\nimport { Wrapper } from '../../atoms/Wrapper';\nimport { Icon } from '../../atoms/Icon';\nimport { ISignUpFormField } from '../../organism/SignUpForm';\nimport { ColorType, IconName } from '../../atoms/Icon/types/types';\nimport { TypographyTypeStyle } from '../../atoms/Typography/types/types';\nimport { GendersListType } from '../../../store/types/types';\n\nimport './formSelect.scss';\n\ninterface IFormSelect {\n  error: string | undefined;\n  className: string;\n  labelText: string;\n  options: GendersListType[];\n  setValue: UseFormSetValue<ISignUpFormField>;\n  clearErrors: UseFormClearErrors<ISignUpFormField>;\n}\n\nexport const FormSelect: React.FC<IFormSelect> = ({\n  labelText,\n  error,\n  className,\n  options,\n  setValue,\n  clearErrors,\n}) => {\n  const [isVisibleList, setIsVisibleList] = useState<boolean>(false);\n  const [genderValue, setGenderValue] = useState<string>('');\n\n  const classProps = classNames('select__list', {\n    ' select__list_active': isVisibleList,\n  });\n\n  return (\n    <Wrapper className=\"form-field\">\n      <Label labelText={labelText} className=\"form-field__label\" />\n\n      <Wrapper\n        className={classNames('select', {\n          ' select_notification_error': error,\n          [`${className}`]: className,\n        })}\n        onClick={() => setIsVisibleList(!isVisibleList)}\n      >\n        <Typography\n          variant={TypographyTypeStyle.p3}\n          className=\"select__placeholder\"\n          color={genderValue ? undefined : ColorType.darkGrey}\n        >\n          {genderValue ? genderValue : 'Your gender'}\n        </Typography>\n\n        <Icon\n          className={classNames(`select__button`, {\n            ' select__button_active': isVisibleList,\n          })}\n          name={IconName.arrowDown}\n          color={ColorType.primary}\n        />\n\n        <ul className={classProps}>\n          {options.map((item) => (\n            <li\n              className=\"select__item\"\n              onClick={() => {\n                setValue('gender', item.id, { shouldValidate: true });\n                setGenderValue(item.gender);\n                setIsVisibleList(!isVisibleList);\n                clearErrors(['gender']);\n              }}\n              key={item.id}\n            >\n              <Typography variant={TypographyTypeStyle.p3}>{item.gender}</Typography>\n            </li>\n          ))}\n        </ul>\n      </Wrapper>\n\n      {error && <Label errorText={error} className=\"form-field__label_notification_error\" />}\n    </Wrapper>\n  );\n};\n","import React, { useCallback, useContext, useEffect } from 'react';\nimport { useHistory } from 'react-router';\nimport { observer } from 'mobx-react-lite';\nimport { useForm, Controller, SubmitHandler, FieldValues } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { RootStoreContext } from '../../../store/RootStore';\nimport { IconName } from '../../atoms/Icon/types/types';\nimport { Button } from '../../atoms/Button';\nimport { Typography } from '../../atoms/Typography';\nimport { Wrapper } from '../../atoms/Wrapper';\nimport { FormSelect } from '../../molecules/FormSelect';\nimport { Spinner } from '../../molecules/Spinner';\nimport { ButtonIcon } from '../../molecules/ButtonIcon';\nimport { CaptchaBlock } from '../../molecules/CaptchaBlock';\nimport { FormInput } from '../../molecules/FormInput';\nimport { ButtonSize, ButtonType, ButtonVariant } from '../../atoms/Button/types/types';\nimport { InputId, InputSize, InputType } from '../../molecules/FormInput/types/types';\nimport { TypographyTypeStyle } from '../../atoms/Typography/types/types';\nimport { convertDataToFormData } from '../../../utils/convertDataToFormData';\nimport { defineFieldError } from '../../../utils/defineFieldError';\nimport { SCREENS } from '../../../router/endpoints';\nimport { LOADING_STATE } from '../../../store/types/types';\n\nimport './signUpForm.scss';\n\nexport interface ISignUpFormField {\n  login: string;\n  password?: string;\n  passwordConfirm?: string;\n  nickname: string;\n  gender: string;\n  captcha?: string;\n}\n\nconst schema = yup.object().shape({\n  login: yup\n    .string()\n    .min(2, 'Your name must contain at least 2 letters')\n    .max(50, 'Your name must be less than 50 letters')\n    .required('Please input your name'),\n  password: yup.string().required('Please input password'),\n  passwordConfirm: yup\n    .string()\n    .required('Please confirm password')\n    .oneOf([yup.ref('password'), null], 'Passwords must match'),\n  nickname: yup\n    .string()\n    .min(2, 'Your name must contain at least 2 letters')\n    .max(50, 'Your name must be less than 50 letters')\n    .required('Please input your name'),\n  gender: yup.string().required('Please choose your gender').typeError('Choose your gender'),\n  captcha: yup\n    .string()\n    .min(5, 'Min 5 symbols')\n    .max(5, 'Max 5 symbols')\n    .required('Please input captcha'),\n});\n\nexport const SignUpForm = observer(() => {\n  const history = useHistory();\n  const { genderListStore, userStore } = useContext(RootStoreContext);\n\n  const handleFetchGenderList = useCallback(() => {\n    genderListStore.fetchGenderList();\n  }, [genderListStore]);\n\n  const {\n    handleSubmit,\n    control,\n    setValue,\n    setError,\n    clearErrors,\n    formState: { errors, isValid, isSubmitSuccessful },\n  } = useForm<FieldValues>({\n    mode: 'onChange',\n    resolver: yupResolver(schema),\n    defaultValues: {\n      login: '',\n      password: '',\n      passwordConfirm: '',\n      nickname: '',\n      gender: '',\n      captcha: '',\n    },\n  });\n\n  const onSubmit: SubmitHandler<ISignUpFormField> = async (formData) => {\n    const isRegistrationSuccess = await userStore.sendUserAuthData<boolean>(\n      convertDataToFormData(formData),\n      '/auth/register'\n    );\n\n    isRegistrationSuccess && history.push(SCREENS.SCREEN_LOGIN);\n  };\n\n  useEffect(() => {\n    if (userStore.userAuthDataError && isSubmitSuccessful) {\n      defineFieldError(userStore.userAuthDataError, setError);\n    }\n  }, [setError, userStore.userAuthDataError, isSubmitSuccessful]);\n\n  return (\n    <Wrapper className=\"form-sign-up\">\n      <Typography className=\"form-sign-up__text\" variant={TypographyTypeStyle.h2}>\n        Registration\n      </Typography>\n\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Controller\n          name={InputId.login}\n          control={control}\n          render={({ field }) => (\n            <FormInput\n              placeholder={'Input user name'}\n              type={InputType.text}\n              labelText=\"Create user name\"\n              className=\"form-sign-up__input\"\n              field={field}\n              size={InputSize.large}\n              errorText={errors.login?.message}\n            />\n          )}\n        />\n\n        <Controller\n          name={InputId.password}\n          control={control}\n          render={({ field }) => (\n            <FormInput\n              placeholder={'Input password'}\n              type={InputType.text}\n              labelText=\"Create password\"\n              className=\"form-sign-up__input\"\n              field={field}\n              size={InputSize.large}\n              errorText={errors.password?.message}\n            />\n          )}\n        />\n\n        <Controller\n          name={InputId.passwordConfirm}\n          control={control}\n          render={({ field }) => (\n            <FormInput\n              placeholder={'Password confirmation'}\n              type={InputType.text}\n              labelText=\"Password confirmation\"\n              className=\"form-sign-up__input\"\n              field={field}\n              size={InputSize.large}\n              isAvailableAutoComplete={false}\n              errorText={errors.passwordConfirm?.message}\n            />\n          )}\n        />\n\n        <Controller\n          name={InputId.nickname}\n          control={control}\n          render={({ field }) => (\n            <FormInput\n              placeholder={'Nickname'}\n              type={InputType.text}\n              labelText=\"Nickname\"\n              className=\"form-sign-up__input\"\n              field={field}\n              size={InputSize.large}\n              errorText={errors.nickname?.message}\n            />\n          )}\n        />\n\n        {genderListStore.loadingState === LOADING_STATE.PENDING ? (\n          <Spinner />\n        ) : genderListStore.genderListFetchError ? (\n          <Wrapper flex align=\"center\">\n            Failed to fetch gender list. Try again?\n            <ButtonIcon\n              iconName={IconName.updateIcon}\n              type={ButtonType.button}\n              onClick={handleFetchGenderList}\n              arialabel=\"Fetch gender list\"\n            />\n          </Wrapper>\n        ) : (\n          <FormSelect\n            options={genderListStore.genderList}\n            labelText={'Your gender'}\n            className=\"form-sign-up__input\"\n            setValue={setValue}\n            clearErrors={clearErrors}\n            error={errors.gender?.message}\n          />\n        )}\n\n        <Wrapper flex className=\"form-sign-up__security-code\">\n          <Controller\n            name={InputId.captcha}\n            control={control}\n            render={({ field }) => (\n              <FormInput\n                placeholder={'Security code'}\n                type={InputType.text}\n                labelText=\"Security code\"\n                className=\"form-sign-up__input\"\n                field={field}\n                isAvailableAutoComplete={false}\n                size={InputSize.medium}\n                errorText={errors.captcha?.message}\n              />\n            )}\n          />\n          <CaptchaBlock />\n        </Wrapper>\n\n        <Wrapper flex className=\"form-sign-up__buttons\">\n          <Button\n            className=\"form-sign-up__button\"\n            variant={ButtonVariant.primary}\n            size={ButtonSize.medium}\n            type={ButtonType.submit}\n            isDisabled={!isValid}\n          >\n            Register\n          </Button>\n\n          <Button\n            className=\"form-sign-up__button\"\n            variant={ButtonVariant.outline}\n            size={ButtonSize.medium}\n            type={ButtonType.button}\n            isNavLink\n            path={SCREENS.SCREEN_LOGIN}\n          >\n            Log In\n          </Button>\n        </Wrapper>\n      </form>\n    </Wrapper>\n  );\n});\n","import React from 'react';\nimport { match } from 'react-router';\nimport { Wrapper } from '../../atoms/Wrapper';\nimport { MainContainer } from '../MainContainer';\nimport { Pages } from '../../../router/endpoints';\n\nimport './authPageTemplate.scss';\n\ninterface IAuthPageTemplate {\n  header?: React.ReactElement;\n  authForm?: React.ReactElement;\n  isLoginPage?: match<Record<string, never>> | null;\n}\n\nexport const AuthPageTemplate: React.FC<IAuthPageTemplate> = ({\n  header,\n  authForm,\n  isLoginPage,\n}): React.ReactElement => {\n  return (\n    <MainContainer page={Pages.auth}>\n      <Wrapper flex column align=\"center\" className=\"auth-page__aside-form\">\n        <Wrapper className={isLoginPage ? 'aside-form__login-inner' : 'aside-form__signup-inner'}>\n          {header}\n          {authForm}\n        </Wrapper>\n      </Wrapper>\n      <Wrapper className=\"auth-page__aside-image\" />\n    </MainContainer>\n  );\n};\n","import React, { useContext, useEffect } from 'react';\nimport { useRouteMatch } from 'react-router';\nimport { Header } from '../../components/organism/Header';\nimport { LoginForm } from '../../components/organism/LoginForm';\nimport { SignUpForm } from '../../components/organism/SignUpForm';\nimport { AuthPageTemplate } from '../../components/templates/AuthPageTemplate';\nimport { RootStoreContext } from '../../store/RootStore';\nimport { SCREENS } from '../../router/endpoints';\n\nexport const AuthPage = (): React.ReactElement => {\n  const isLoginPage = useRouteMatch(`${SCREENS.SCREEN_LOGIN}`);\n  const { genderListStore } = useContext(RootStoreContext);\n\n  useEffect(() => {\n    genderListStore.fetchGenderList();\n  }, [genderListStore]);\n\n  return (\n    <AuthPageTemplate\n      header={<Header isLoginPage />}\n      authForm={isLoginPage ? <LoginForm /> : <SignUpForm />}\n      isLoginPage={isLoginPage}\n    />\n  );\n};\n","import React from 'react';\nimport { Route, Redirect, RouteComponentProps } from 'react-router-dom';\nimport * as H from 'history';\nimport { SCREENS } from './endpoints';\n\ninterface IProps {\n  component: React.FC<RouteComponentProps>;\n  path: SCREENS | SCREENS[];\n  redirectPath: H.LocationDescriptor;\n  exact: boolean;\n  isUserAuthenticate: boolean;\n}\n\nexport const PrivateRoute: React.FC<IProps> = ({\n  component: Component,\n  isUserAuthenticate,\n  redirectPath,\n  ...rest\n}) => {\n  return (\n    <Route\n      {...rest}\n      render={(props) => {\n        return isUserAuthenticate ? <Component {...props} /> : <Redirect to={redirectPath} />;\n      }}\n    />\n  );\n};\n","import React, { useContext } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { observer } from 'mobx-react-lite';\nimport { ChatPage } from '../pages/ChatPage';\nimport { AuthPage } from '../pages/AuthPage';\nimport { PrivateRoute } from './PrivateRoute';\nimport { SCREENS } from './endpoints';\nimport { RootStoreContext } from '../store/RootStore';\n\nexport const Routes: React.FC = observer(() => {\n  const { userStore } = useContext(RootStoreContext);\n\n  const {\n    userInfo: { isUserAuthenticate },\n  } = userStore;\n\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <PrivateRoute\n          component={ChatPage}\n          exact\n          path={[SCREENS.SCREEN_DIALOGS, SCREENS.SCREEN_CURRENT_DIALOG]}\n          isUserAuthenticate={isUserAuthenticate}\n          redirectPath={SCREENS.SCREEN_LOGIN}\n        />\n\n        <PrivateRoute\n          component={AuthPage}\n          exact\n          path={[SCREENS.SCREEN_LOGIN, SCREENS.SCREEN_SIGN_UP, SCREENS.SCREEN_HOME]}\n          isUserAuthenticate={!isUserAuthenticate}\n          redirectPath={SCREENS.SCREEN_DIALOGS}\n        />\n        <Route component={() => <>404: Page not found</>} />\n      </Switch>\n    </Router>\n  );\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Routes } from './router';\n\nimport './styles/index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Routes />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","var map = {\n\t\"./addFile.svg\": [\n\t\t225,\n\t\t3\n\t],\n\t\"./arrowDown.svg\": [\n\t\t226,\n\t\t4\n\t],\n\t\"./arrowLeft.svg\": [\n\t\t227,\n\t\t5\n\t],\n\t\"./closeCircleIcon.svg\": [\n\t\t228,\n\t\t6\n\t],\n\t\"./closeIcon.svg\": [\n\t\t229,\n\t\t7\n\t],\n\t\"./deleteIcon.svg\": [\n\t\t230,\n\t\t8\n\t],\n\t\"./femaleAvatar.svg\": [\n\t\t231,\n\t\t9\n\t],\n\t\"./inputError.svg\": [\n\t\t232,\n\t\t10\n\t],\n\t\"./loginPageFrame.svg\": [\n\t\t233,\n\t\t11\n\t],\n\t\"./loginPageFrameMobile.svg\": [\n\t\t234,\n\t\t12\n\t],\n\t\"./logo.svg\": [\n\t\t235,\n\t\t13\n\t],\n\t\"./maleAvatar.svg\": [\n\t\t236,\n\t\t14\n\t],\n\t\"./messageAreaFrame.svg\": [\n\t\t237,\n\t\t15\n\t],\n\t\"./noUserAvatar.svg\": [\n\t\t238,\n\t\t16\n\t],\n\t\"./sendMessage.svg\": [\n\t\t239,\n\t\t17\n\t],\n\t\"./spiner.svg\": [\n\t\t240,\n\t\t18\n\t],\n\t\"./spinnerCircle.svg\": [\n\t\t241,\n\t\t19\n\t],\n\t\"./updateIcon.svg\": [\n\t\t242,\n\t\t20\n\t],\n\t\"./userIcon.svg\": [\n\t\t243,\n\t\t21\n\t],\n\t\"./userList.svg\": [\n\t\t244,\n\t\t22\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 97;\nmodule.exports = webpackAsyncContext;"],"sourceRoot":""}