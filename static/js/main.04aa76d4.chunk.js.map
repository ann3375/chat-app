{"version":3,"sources":["components/atoms/Typography/types/types.ts","components/atoms/Button/index.tsx","components/atoms/Wrapper/index.tsx","components/atoms/Icon/types/types.ts","components/atoms/Typography/index.tsx","components/molecules/DialogMessage/index.tsx","components/organism/Dialog/index.tsx","components/atoms/Icon/index.tsx","components/atoms/Button/types/types.ts","components/atoms/Logo/index.tsx","components/atoms/Logo/types/types.ts","router/endpoints.ts","components/molecules/ButtonIcon/index.tsx","components/molecules/FormInput/types/types.ts","components/organism/Header/index.tsx","components/atoms/Label/index.tsx","services/types.ts","components/molecules/FileInput/index.tsx","components/molecules/FormInput/index.tsx","services/contants.ts","store/types/types.ts","store/genderListStore.ts","components/atoms/Avatar/types/types.ts","store/dialogStore.ts","hooks/constants.ts","store/userListStore.ts","utils/localStorageUtils.ts","store/userStore.ts","store/RootStore.ts","components/organism/MessageForm/constants/constants.ts","components/organism/FilePreview/index.tsx","hooks/useFileReader.ts","utils/validateFile.ts","components/organism/MessageForm/index.tsx","utils/checkUserAvatar.ts","components/atoms/Avatar/index.tsx","components/molecules/UserStatus/index.tsx","components/organism/StatusBar/index.tsx","components/molecules/UserListItem/index.tsx","components/molecules/UserListNotification/index.tsx","components/molecules/Spinner/index.tsx","components/organism/UserList/index.tsx","components/templates/MainContainer/index.tsx","utils/constants.ts","components/templates/ChatPageTemplate/index.tsx","hooks/useWindowSize.tsx","components/organism/Modal/index.tsx","pages/ChatPage/index.tsx","hooks/useWebsocket.ts","services/api.ts","components/molecules/CaptchaBlock/index.tsx","utils/convertDataToFormData.ts","utils/defineFieldError.ts","components/organism/LoginForm/index.tsx","components/molecules/FormSelect/index.tsx","components/organism/SignUpForm/index.tsx","components/templates/AuthPageTemplate/index.tsx","pages/AuthPage/index.tsx","router/PrivateRoute.tsx","router/index.tsx","index.tsx","../ /^/.*/.svg$/ groupOptions: {} namespace object"],"names":["TypographyTypeStyle","Button","children","type","isDisabled","variant","className","size","path","isNavLink","onClick","classProps","classNames","to","disabled","Wrapper","flex","row","align","column","props","IconName","ColorType","TypographyType","h1","h2","h3","h4","p1","p2","p3","span","Typography","color","Component","DialogMessage","isCurrentUserMessage","messageText","Dialog","currentUsername","dialogMessages","length","map","item","text","fromUser","createdAt","Icon","name","rest","importedIconRef","React","useRef","useState","isLoading","setIsLoading","useEffect","importIcon","a","current","default","console","log","ImportedIcon","ButtonType","ButtonSize","ButtonVariant","Logo","logo","LogoSize","SCREENS","Pages","ButtonIcon","iconName","small","icon","InputType","InputId","InputSize","Header","memo","isLoginPage","isChatPage","SCREEN_DIALOGS","SCREEN_LOGIN","large","primary","mediumBlue","button","userIcon","Label","htmlFor","labelText","errorText","WebSocketMessageType","FileInput","id","field","uniqueKey","handleFileInputChange","files","addFile","file","value","filename","onChange","event","FormInput","placeholder","isRequired","isAvailableAutoComplete","classPropsInput","textarea","required","autoComplete","error","inputError","LOADING_STATE","URL","URL_API","WS_API","webSocketMessage","messageToWS","usersList","userData","sendMessage","message","gender","sendUserJoinedInfo","UserGender","AvatarSize","GenderListStore","rootStore","genderList","genderListFetchError","loadingState","NEVER","this","makeAutoObservable","PENDING","fetch","method","then","response","status","json","res","runInAction","setGenderList","genders","setError","LOADED","WindowSize","DialogStore","dialogsList","currentDialogInfo","companion","username","noGender","lastSeen","currentDialogId","currentDialogError","find","dialog","dialogId","getDialogInfo","newDialog","push","addDialogToDialogList","currentDialog","url","body","clearError","UserListStore","userList","userStore","userInfo","excludedCurrentUserUserList","filter","user","localStorageUtils","accessToken","localStorage","removeItem","getItem","token","setItem","getAccessToken","UserStore","isUserAuthenticate","tokens","userAuthDataError","setAccessToken","clearLocalStorage","RootStoreContext","createContext","userListStore","dialogStore","genderListStore","SUPPORTED_FORMATS","VIDEO","AUDIO","IMAGE","FilePreview","previewFileState","handleDeletePreviewFile","isVisiblePreviewFile","fileInfo","handleSetIsVisiblePreview","preview_active","includes","controls","src","closeCircleIcon","deleteIcon","initialFileInfoState","validateFile","isSizeError","isTypeError","isValid","schema","yup","shape","MessageForm","WSAction","useContext","isLoaded","setIsLoaded","setFileInfo","setIsVisiblePreviewFile","Date","now","uniqueKeyInput","resetUniqueKeyInput","loadFile","useCallback","reader","FileReader","onload","result","readAsDataURL","handleDeleteFile","handleResetUniqueKey","useFileReader","setPreviewFileState","isFileLoading","forUser","fileLink","useForm","mode","resolver","yupResolver","defaultValues","handleSubmit","control","reset","clearErrors","formState","errors","isSubmitSuccessful","fileErrors","onSubmit","data","formData","FormData","append","sendMessageFile","JSON","stringify","onChangeHandler","target","setTimeout","arrowDown","render","spinnerCircle","submit","checkUserAvatar","male","maleAvatar","female","femaleAvatar","noUserAvatar","Avatar","UserStatus","userStatus","StatusBar","isVisibleUserList","dialogInfo","handleVisibleUserList","closeIcon","arrowLeft","history","back","UserListItem","isCurrentUserLastMessage","lastMessage","setDialogInfo","activeClassName","medium","UserListNotification","Spinner","spiner","UserList","listRef","users","ref","index","MainContainer","page","SIGN_UP_FIELDS","ChatPageTemplate","header","statusBar","messageForm","notificationButton","errorModal","width","windowSize","setWindowSize","handleWindowResize","window","innerWidth","addEventListener","removeEventListener","useWindowSize","isCurrentDialogPage","useRouteMatch","SCREEN_CURRENT_DIALOG","isDialogsPage","chat","SIZE_MOBILE_L","isExact","Modal","notificationText","isError","notification","clearUserInfo","ChatPage","observer","setIsVisibleUserList","currentGender","messages","ws","isOpen","setIsOpen","setResult","isClosed","setIsClosed","params","WebSocket","close","onopen","onerror","onclose","onmessage","reverseData","replaceAll","parse","eventType","wsResponse","updateCurrentDialogMessages","setUserList","setCurrentUserInfo","updateUserList","send","messageType","useMemo","fetchUserList","fetchUserData","useWebsocket","wsState","userListRef","lastseen","setCurrentDialogInfo","undefined","fetchApi","fetchCaptcha","setCaptchaURL","CaptchaBlock","captchaURL","handlerCaptchaURL","alt","updateIcon","convertDataToFormData","login","password","captcha","passwordConfirm","nickname","defineFieldError","match","min","max","LoginForm","sendUserAuthData","outline","SCREEN_SIGN_UP","FormSelect","options","setValue","isVisibleList","setIsVisibleList","genderValue","setGenderValue","darkGrey","shouldValidate","oneOf","typeError","SignUpForm","useHistory","handleFetchGenderList","fetchGenderList","AuthPageTemplate","authForm","auth","AuthPage","PrivateRoute","component","redirectPath","Routes","basename","process","exact","SCREEN_HOME","ReactDOM","StrictMode","document","getElementById","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","e","Error","code","ids","keys","Object","module","exports"],"mappings":"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","file":"static/js/main.04aa76d4.chunk.js","sourcesContent":["export enum TypographyTypeStyle {\n  h1 = 'h1',\n  h2 = 'h2',\n  h3 = 'h3',\n  h4 = 'h4',\n  p1 = 'p1',\n  p2 = 'p2',\n  p3 = 'p3',\n  span = 'span',\n}\n\nexport const TypographyType = {\n  [TypographyTypeStyle.h1]: 'h1',\n  [TypographyTypeStyle.h2]: 'h2',\n  [TypographyTypeStyle.h3]: 'h3',\n  [TypographyTypeStyle.h4]: 'h4',\n  [TypographyTypeStyle.p1]: 'p',\n  [TypographyTypeStyle.p2]: 'p',\n  [TypographyTypeStyle.p3]: 'p',\n  [TypographyTypeStyle.span]: 'span',\n} as const;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { ButtonSize, ButtonType, ButtonVariant } from './types/types';\nimport { NavLink } from 'react-router-dom';\nimport { SCREENS } from '../../../router/endpoints';\n\nimport './button.scss';\n\nexport interface IButton {\n  type: ButtonType;\n  children: React.ReactNode;\n  isDisabled?: boolean;\n  isNavLink?: boolean;\n  path?: SCREENS;\n  variant?: ButtonVariant;\n  size?: ButtonSize;\n  className?: string;\n  onClick?: () => void;\n}\n\nexport const Button: React.FC<IButton> = ({\n  children,\n  type,\n  isDisabled,\n  variant,\n  className,\n  size,\n  path,\n  isNavLink,\n  onClick,\n}) => {\n  const classProps = classNames('button', {\n    [`button_size_${size}`]: size,\n    [`button_variant_${variant}`]: variant,\n    [`${className}`]: className,\n  });\n\n  if (isNavLink && path) {\n    return (\n      <NavLink className={classProps} to={path}>\n        {children}\n      </NavLink>\n    );\n  }\n\n  return (\n    <button onClick={onClick} type={type} disabled={isDisabled} className={classProps}>\n      {children}\n    </button>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport './wrapper.scss';\n\nexport interface IWrapper {\n  children?: React.ReactNode;\n  className?: string;\n  flex?: boolean;\n  column?: boolean;\n  row?: boolean;\n  align?: 'center' | 'flex-start';\n  onClick?: () => void;\n}\n\nexport const Wrapper: React.FC<IWrapper> = ({\n  className,\n  children,\n  flex,\n  row,\n  align,\n  column,\n  ...props\n}) => {\n  const classProps = classNames('', {\n    ['wrapper_flex']: flex,\n    ['wrapper_flex_column']: column,\n    ['wrapper_flex_row']: row,\n    [`wrapper_flex_align_${align}`]: align,\n    [`${className}`]: className,\n  });\n  return (\n    <div className={classProps} {...props}>\n      {children}\n    </div>\n  );\n};\n","export enum IconName {\n  inputError = 'inputError',\n  sendMessage = 'sendMessage',\n  addFile = 'addFile',\n  logo = 'logo',\n  maleAvatar = 'maleAvatar',\n  femaleAvatar = 'femaleAvatar',\n  noUserAvatar = 'noUserAvatar',\n  userIcon = 'userIcon',\n  userList = 'userList',\n  arrowLeft = 'arrowLeft',\n  closeIcon = 'closeIcon',\n  spiner = 'spiner',\n  spinnerCircle = 'spinnerCircle',\n  updateIcon = 'updateIcon',\n  arrowDown = 'arrowDown',\n  deleteIcon = 'deleteIcon',\n  closeCircleIcon = 'closeCircleIcon',\n}\n\nexport enum ColorType {\n  error = 'tomato',\n  primary = 'cornflowerblue',\n  grey = 'lightgray',\n  darkGrey = 'darkgrey',\n  mediumBlue = 'mediumBlue',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { TypographyType, TypographyTypeStyle } from './types/types';\nimport { ColorType } from '../Icon/types/types';\n\nimport './typographyStyle.scss';\n\ninterface ITypography {\n  variant: TypographyTypeStyle;\n  children: React.ReactNode;\n  className?: string;\n  color?: ColorType;\n}\n\nexport const Typography: React.FC<ITypography> = ({\n  variant,\n  children,\n  color,\n  className,\n  ...props\n}) => {\n  const Component = TypographyType[variant];\n  return (\n    <Component\n      className={classNames('typography', {\n        [`typography_variant_${variant}`]: variant,\n        [`typography_color_${color}`]: color,\n        [`${className}`]: className,\n      })}\n      {...props}\n    >\n      {children}\n    </Component>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Wrapper } from '../../atoms/Wrapper';\nimport { Typography } from '../../atoms/Typography';\nimport { TypographyTypeStyle } from '../../atoms/Typography/types/types';\n\nimport './dialogMessage.scss';\n\ninterface IDialogMessage {\n  isCurrentUserMessage: boolean;\n  messageText?: string;\n}\n\nexport const DialogMessage: React.FC<IDialogMessage> = ({ isCurrentUserMessage, messageText }) => {\n  const classProps = classNames('message', {\n    ['message_side_left']: !isCurrentUserMessage,\n    ['message_side_right']: isCurrentUserMessage,\n  });\n\n  return (\n    <Wrapper className={classProps}>\n      <Typography variant={TypographyTypeStyle.p1}>{messageText}</Typography>\n    </Wrapper>\n  );\n};\n","import React from 'react';\nimport { Wrapper } from '../../atoms/Wrapper';\nimport { DialogMessage } from '../../molecules/DialogMessage';\nimport { MessageType } from '../../../store/types/types';\n\nimport './dialog.scss';\n\ninterface IDialog {\n  dialogMessages: MessageType[] | undefined;\n  currentUsername: string;\n}\n\nexport const Dialog: React.FC<IDialog> = ({ currentUsername, dialogMessages }) => {\n  return (\n    <>\n      {dialogMessages?.length ? (\n        <Wrapper className=\"messages-area\">\n          {dialogMessages.map((item) => (\n            <DialogMessage\n              messageText={item.text}\n              isCurrentUserMessage={item.fromUser === currentUsername}\n              key={item.createdAt}\n            />\n          ))}\n        </Wrapper>\n      ) : (\n        'сообщений нет'\n      )}\n    </>\n  );\n};\n","import React, { useState } from 'react';\n\ninterface IconProps extends React.SVGProps<SVGSVGElement> {\n  name: string;\n}\n\nexport const Icon: React.FC<IconProps> = ({ name, ...rest }): JSX.Element | null => {\n  const importedIconRef = React.useRef<React.FC<React.SVGProps<SVGSVGElement>>>();\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  React.useEffect(() => {\n    setIsLoading(true);\n    const importIcon = async (): Promise<void> => {\n      try {\n        importedIconRef.current = (\n          await import(`!!@svgr/webpack?-svgo,+titleProp,+ref!../../../assets/images/${name}.svg`)\n        ).default;\n      } catch (err) {\n        console.log(err);\n        throw err;\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    importIcon();\n    return () => {\n      setIsLoading(false);\n    };\n  }, [name]);\n\n  if (!isLoading && importedIconRef.current) {\n    const { current: ImportedIcon } = importedIconRef;\n\n    return <ImportedIcon {...rest} />;\n  }\n\n  return null;\n};\n","export enum ButtonType {\n  button = 'button',\n  reset = 'reset',\n  submit = 'submit',\n}\n\nexport enum ButtonSize {\n  large = 'large',\n  medium = 'medium',\n  small = 'small',\n}\n\nexport enum ButtonVariant {\n  primary = 'primary',\n  outline = 'outline',\n  notification = 'notification',\n  icon = 'icon',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Wrapper } from '../Wrapper';\nimport { Icon } from '../Icon';\nimport { IconName } from '../Icon/types/types';\nimport { LogoSize } from './types/types';\n\nimport './logo.scss';\n\ninterface ILogo {\n  size: LogoSize;\n  className?: string;\n}\n\nexport const Logo: React.FC<ILogo> = ({ size, className }) => {\n  const classProps = classNames('logo', {\n    [`logo_size_${size}`]: size,\n    [`${className}`]: className,\n  });\n\n  return (\n    <Wrapper className={classProps}>\n      <Icon name={IconName.logo} />\n    </Wrapper>\n  );\n};\n","export enum LogoSize {\n  large = 'large',\n  medium = 'medium',\n}\n","export enum SCREENS {\n  SCREEN_HOME = '/',\n  SCREEN_LOGIN = '/login',\n  SCREEN_SIGN_UP = '/signup',\n  SCREEN_CURRENT_DIALOG = '/dialogs/:id',\n  SCREEN_DIALOGS = '/dialogs',\n}\n\nexport enum Pages {\n  auth = 'auth',\n  chat = 'chat',\n}\n","import React from 'react';\nimport { Button } from '../../atoms/Button';\nimport { IButton } from '../../atoms/Button';\nimport { Icon } from '../../atoms/Icon';\nimport { ButtonSize, ButtonVariant } from '../../atoms/Button/types/types';\nimport { ColorType, IconName } from '../../atoms/Icon/types/types';\n\nimport './buttonIcon.scss';\n\ninterface IButtonIcon extends Omit<IButton, 'size' | 'variant' | 'children'> {\n  iconName: IconName;\n  color?: ColorType;\n}\n\nexport const ButtonIcon: React.FC<IButtonIcon> = ({\n  iconName,\n  type,\n  color,\n  isDisabled,\n  className,\n  onClick,\n}) => {\n  return (\n    <Button\n      type={type}\n      size={ButtonSize.small}\n      isDisabled={isDisabled}\n      onClick={onClick}\n      className={className}\n      variant={ButtonVariant.icon}\n    >\n      <Icon name={iconName} color={color} className=\"button__icon\" />\n    </Button>\n  );\n};\n","export enum InputType {\n  text = 'text',\n  email = 'email',\n  password = 'password',\n  file = 'file',\n  textarea = 'textarea',\n  select = 'select',\n}\n\nexport enum InputId {\n  login = 'login',\n  password = 'password',\n  passwordConfirm = 'passwordConfirm',\n  nickname = 'nickname',\n  captcha = 'captcha',\n  gender = 'gender',\n  files = 'files',\n  messageText = 'messageText',\n}\n\nexport enum InputSize {\n  large = 'large',\n  medium = 'medium',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\nimport { Logo } from '../../atoms/Logo';\nimport { Typography } from '../../atoms/Typography';\nimport { ButtonIcon } from '../../molecules/ButtonIcon';\nimport { ColorType, IconName } from '../../atoms/Icon/types/types';\nimport { LogoSize } from '../../atoms/Logo/types/types';\nimport { TypographyTypeStyle } from '../../atoms/Typography/types/types';\nimport { ButtonType } from '../../atoms/Button/types/types';\nimport { SCREENS } from '../../../router/endpoints';\n\nimport './header.scss';\n\ninterface IHeader {\n  isLoginPage?: boolean;\n  isChatPage?: boolean;\n}\n\nexport const Header = React.memo(function Header({ isLoginPage, isChatPage }: IHeader) {\n  const classProps = classNames('header', {\n    [`auth-page__header`]: isLoginPage,\n    [`chat-page__header`]: isChatPage,\n  });\n  return (\n    <header className={classProps}>\n      {isChatPage ? (\n        <NavLink to={isChatPage ? SCREENS.SCREEN_DIALOGS : SCREENS.SCREEN_LOGIN}>\n          <Logo size={LogoSize.large} className=\"header__logo\" />\n        </NavLink>\n      ) : (\n        <Logo size={LogoSize.large} className=\"header__logo\" />\n      )}\n\n      {isLoginPage ? (\n        <Typography variant={TypographyTypeStyle.h1} className=\"header__text\">\n          Wellcome to\n          <Typography variant={TypographyTypeStyle.span} color={ColorType.primary}>\n            {' '}\n            Chatty\n          </Typography>\n          <Typography variant={TypographyTypeStyle.span} color={ColorType.mediumBlue}>\n            !\n          </Typography>\n        </Typography>\n      ) : (\n        <ButtonIcon\n          className=\"header__button\"\n          type={ButtonType.button}\n          color={ColorType.primary}\n          iconName={IconName.userIcon}\n        />\n      )}\n    </header>\n  );\n});\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport './label.scss';\n\ninterface ILabel {\n  htmlFor?: string;\n  children?: React.ReactNode;\n  labelText?: string;\n  errorText?: string;\n  className?: string;\n}\n\nexport const Label: React.FC<ILabel> = ({ htmlFor, labelText, errorText, children, className }) => {\n  const classProps = classNames('label', {\n    [`${className}`]: className,\n    [`label_notification_error`]: errorText,\n  });\n\n  return (\n    <label htmlFor={htmlFor} className={classProps}>\n      {errorText ? errorText : labelText}\n      {children}\n    </label>\n  );\n};\n","export type FetchGenderListResponse = {\n  genders: {\n    id: string;\n    gender: string;\n  }[];\n};\n\nexport enum WebSocketMessageType {\n  usersList = 'users_list',\n  userData = 'user_data',\n  sendMessage = 'send_message',\n  sendUserJoinedInfo = 'user_joined',\n}\n\nexport interface IMessageToWS {\n  (messageType: WebSocketMessageType, data?: Record<string, unknown>): void;\n}\n\nexport interface IWSAction {\n  fetchUserList: () => void;\n  fetchUserData: () => void;\n  sendMessage: (text: string) => void;\n  sendUserJoinedInfo: (name: string, gender: string) => void;\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Label } from '../../atoms/Label';\nimport { InputId, InputType } from '../FormInput/types/types';\nimport { IconName } from '../../atoms/Icon/types/types';\nimport { Icon } from '../../atoms/Icon';\nimport { Wrapper } from '../../atoms/Wrapper';\n\nimport './fileInput.scss';\n\ninterface IFileInput {\n  id: InputId;\n  uniqueKey: number;\n  errorText: string | undefined;\n  className: string;\n  field: {\n    name: string;\n    onBlur: () => void;\n    onChange: (e: File) => void;\n    value: { filename: string };\n  };\n  handleFileInputChange: (\n    event: { target: HTMLInputElement },\n    onChangeHandler: (e: File) => void\n  ) => void;\n}\n\nexport const FileInput: React.FC<IFileInput> = ({\n  id,\n  field,\n  uniqueKey,\n  errorText,\n  className,\n  handleFileInputChange,\n}): React.ReactElement => {\n  const classProps = classNames('file-input', {\n    [`${className}`]: className,\n  });\n\n  return (\n    <Wrapper className={classProps}>\n      <Label htmlFor={InputId.files} className=\"file-input__label\">\n        <Icon name={IconName.addFile} className=\"file-input__icon\" />\n        <input\n          type={InputType.file}\n          key={uniqueKey}\n          id={id}\n          {...field}\n          value={field.value.filename}\n          onChange={(event) => {\n            handleFileInputChange(event, field.onChange);\n          }}\n        />\n      </Label>\n      <Label errorText={errorText} className=\"file-input__label_error\" />\n    </Wrapper>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Label } from '../../atoms/Label';\nimport { Wrapper } from '../../atoms/Wrapper';\nimport { Icon } from '../../atoms/Icon';\nimport { ColorType, IconName } from '../../atoms/Icon/types/types';\nimport { InputSize, InputType } from './types/types';\n\nimport './formInput.scss';\n\ninterface IFormInput {\n  type: string;\n  placeholder?: string;\n  isRequired?: boolean;\n  isDisabled?: boolean;\n  labelText?: string;\n  errorText?: string;\n  className?: string;\n  size?: InputSize;\n  isAvailableAutoComplete?: boolean;\n  field: {\n    name: string;\n    onBlur: () => void;\n    onChange: React.ChangeEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n  };\n}\n\nexport const FormInput: React.FC<IFormInput> = ({\n  type,\n  placeholder = '',\n  labelText,\n  errorText,\n  className,\n  isRequired,\n  isDisabled,\n  size,\n  field,\n  isAvailableAutoComplete = true,\n}) => {\n  const classProps = classNames('form-field', {\n    [`${className}`]: className,\n    [`form-field_size_${size}`]: size,\n  });\n\n  const classPropsInput = classNames('form-field__input', {\n    ['form-field__input_notification_error']: errorText,\n  });\n\n  return (\n    <Wrapper className={classProps}>\n      <Label htmlFor={field.name} labelText={labelText} className=\"form-field__label\" />\n\n      <Wrapper className=\"form-field__inner\">\n        {type === InputType.textarea ? (\n          <textarea\n            required={isRequired}\n            className=\"form-field__textarea\"\n            placeholder={placeholder}\n            id={field.name}\n            {...field}\n          />\n        ) : (\n          <input\n            autoComplete={isAvailableAutoComplete ? 'on' : 'off'}\n            className={classPropsInput}\n            id={field.name}\n            placeholder={placeholder}\n            type={type}\n            disabled={isDisabled}\n            {...field}\n          />\n        )}\n\n        {errorText && (\n          <Icon className=\"form-field__icon\" color={ColorType.error} name={IconName.inputError} />\n        )}\n      </Wrapper>\n\n      {errorText && (\n        <Label\n          htmlFor={field.name}\n          errorText={errorText}\n          className=\"form-field__label_notification_error\"\n        />\n      )}\n    </Wrapper>\n  );\n};\n","import { IMessageToWS, WebSocketMessageType } from './types';\n\nexport const URL = 'http://109.194.37.212';\nconst WS_URL = 'ws://109.194.37.212';\nexport const HTTP_PORT = '93';\nconst WS_PORT = '2346';\n\nexport const URL_API = `${URL}:${HTTP_PORT}/api`;\nexport const WS_API = `${WS_URL}:${WS_PORT}`;\n\nexport const webSocketMessage = {\n  fetchUserList: (messageToWS: IMessageToWS): void => {\n    messageToWS(WebSocketMessageType.usersList);\n  },\n\n  fetchUserData: (messageToWS: IMessageToWS): void => {\n    messageToWS(WebSocketMessageType.userData);\n  },\n\n  sendMessage: (messageToWS: IMessageToWS, text: string): void => {\n    messageToWS(WebSocketMessageType.sendMessage, { message: text });\n  },\n\n  sendUserJoinedInfo: (messageToWS: IMessageToWS, name: string, gender: string): void => {\n    messageToWS(WebSocketMessageType.sendUserJoinedInfo, { name, gender });\n  },\n};\n","export enum LOADING_STATE {\n  LOADED = 'LOADED',\n  ERROR = 'ERROR',\n  NEVER = 'NEVER',\n  PENDING = 'PENDING',\n}\n\nexport type GendersListType = {\n  id: string;\n  gender: string;\n};\n\nexport type MessageType = {\n  text: string;\n  fromUser: string;\n  forUser: string;\n  createdAt: number | null;\n  fileLink?: string;\n};\n\nexport type DialogType = {\n  dialogId: string;\n  dialogMessages: MessageType[];\n};\n\nexport type CurrentDialogInfoType = {\n  companion: {\n    username: string;\n    gender: string;\n    lastSeen: string;\n  };\n};\n","import { makeAutoObservable, runInAction } from 'mobx';\nimport { URL_API } from '../services/contants';\nimport { RootStore } from './RootStore';\nimport { GendersListType, LOADING_STATE } from './types/types';\n\nexport class GenderListStore {\n  rootStore: RootStore;\n  genderList: GendersListType[] = [];\n  genderListFetchError = '';\n  loadingState = LOADING_STATE.NEVER;\n\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n    makeAutoObservable(this);\n  }\n\n  setGenderList(genderList: GendersListType[]): void {\n    this.genderListFetchError = '';\n    this.genderList = genderList;\n  }\n\n  setError(error: string): void {\n    this.genderListFetchError = error;\n  }\n\n  *fetchGenderList(): Generator<Promise<void>, void, GendersListType[]> {\n    this.genderList = [];\n    this.loadingState = LOADING_STATE.PENDING;\n\n    try {\n      yield fetch(`${URL_API}/auth`, {\n        method: 'GET',\n      }).then((response) => {\n        if (response.status === 200) {\n          response.json().then((res) => {\n            runInAction(() => {\n              this.setGenderList(res.genders);\n            });\n          });\n        } else {\n          response.text().then((error) => {\n            runInAction(() => {\n              this.setError(error);\n            });\n          });\n        }\n      });\n    } catch (e) {\n      runInAction(() => {\n        this.setError((e as Error).message);\n      });\n    } finally {\n      this.loadingState = LOADING_STATE.LOADED;\n    }\n  }\n}\n","export enum UserGender {\n  male = 'male',\n  female = 'female',\n  noGender = 'noGender',\n}\n\nexport enum AvatarSize {\n  large = 'large',\n  medium = 'medium',\n  small = 'small',\n}\n","import { makeAutoObservable, runInAction } from 'mobx';\nimport { RootStore } from './RootStore';\nimport { UserGender } from '../components/atoms/Avatar/types/types';\nimport { URL_API } from '../services/contants';\nimport { CurrentDialogInfoType, DialogType, LOADING_STATE, MessageType } from './types/types';\n\nexport class DialogStore {\n  rootStore: RootStore;\n  dialogsList: DialogType[] = [];\n  currentDialogInfo: CurrentDialogInfoType = {\n    companion: {\n      username: '',\n      gender: UserGender.noGender,\n      lastSeen: '',\n    },\n  };\n  currentDialogId = '';\n  currentDialogError = '';\n  loadingState: LOADING_STATE = LOADING_STATE.NEVER;\n\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n    makeAutoObservable(this);\n  }\n\n  getDialogInfo(): DialogType | undefined {\n    const currentDialog = this.dialogsList.find(\n      (dialog) => dialog.dialogId === this.currentDialogId\n    );\n    return currentDialog;\n  }\n\n  addDialogToDialogList(): void {\n    const currentDialog = this.getDialogInfo();\n\n    if (!currentDialog) {\n      const newDialog = {\n        dialogId: this.currentDialogId,\n        dialogMessages: [],\n      };\n      this.dialogsList.push(newDialog);\n    }\n  }\n\n  setCurrentDialogInfo(username: string, lastSeen: string, id: string, gender: UserGender): void {\n    runInAction(() => {\n      this.currentDialogInfo.companion = {\n        username,\n        lastSeen,\n        gender,\n      };\n      this.currentDialogId = id;\n      this.addDialogToDialogList();\n    });\n  }\n\n  updateCurrentDialogMessages(message: MessageType): void {\n    const currentDialog = this.getDialogInfo();\n\n    runInAction(() => {\n      currentDialog?.dialogMessages.push(message);\n    });\n  }\n\n  setError(error: string): void {\n    this.currentDialogError = error;\n  }\n\n  clearError(): void {\n    this.currentDialogError = '';\n  }\n\n  async sendMessageFile<R>(files: FormData, url: string): Promise<R | string | undefined> {\n    this.loadingState = LOADING_STATE.PENDING;\n\n    try {\n      return await fetch(`${URL_API}${url}`, {\n        method: 'POST',\n        body: files,\n      }).then((response) => {\n        if (response.status === 200) {\n          if (this.currentDialogError) {\n            runInAction(() => {\n              this.clearError();\n            });\n          }\n          return response.text();\n        } else {\n          response.text().then((error) => {\n            runInAction(() => {\n              console.log('error', error);\n              this.setError(error);\n            });\n          });\n        }\n      });\n    } catch (e) {\n      runInAction(() => {\n        const error = (e as Error).message;\n        this.setError(\n          error === 'Failed to fetch'\n            ? 'Возникла ошибка при отправке файла, попробуйте снова...'\n            : error\n        );\n      });\n    } finally {\n      runInAction(() => {\n        this.loadingState = LOADING_STATE.LOADED;\n      });\n    }\n  }\n}\n","export enum WindowSize {\n  SIZE_MOBILE_L = 425,\n}\n","import { makeAutoObservable, runInAction } from 'mobx';\nimport { IUserListItem } from '../components/molecules/UserListItem';\nimport { RootStore } from './RootStore';\nimport { LOADING_STATE } from './types/types';\n\nexport class UserListStore {\n  rootStore: RootStore;\n  userList: IUserListItem[] = [];\n\n  loadingState: LOADING_STATE = LOADING_STATE.NEVER;\n\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n    makeAutoObservable(this);\n  }\n\n  setUserList(userList: IUserListItem[]): void {\n    const currentUsername = this.rootStore.userStore.userInfo.username;\n    const excludedCurrentUserUserList = userList.filter(\n      (item: { name: string; gender: string }) => item.name !== currentUsername\n    );\n    runInAction(() => {\n      this.userList = excludedCurrentUserUserList;\n\n      this.loadingState = LOADING_STATE.LOADED;\n    });\n  }\n\n  updateUserList(user: IUserListItem): void {\n    const currentUsername = this.rootStore.userStore.userInfo.username;\n\n    runInAction(() => {\n      if (currentUsername !== user.name && !this.userList.find((item) => item.name === user.name)) {\n        this.userList.push(user);\n      }\n    });\n  }\n}\n","class LocalStorageUtils {\n  private accessToken = 'accessToken';\n\n  clearLocalStorage(): void {\n    localStorage.removeItem(this.accessToken);\n  }\n\n  getAccessToken(): string | null {\n    return localStorage.getItem(this.accessToken);\n  }\n\n  setAccessToken(token: string): void {\n    return localStorage.setItem(this.accessToken, token);\n  }\n}\n\nexport const localStorageUtils = new LocalStorageUtils();\n","import { makeAutoObservable, runInAction } from 'mobx';\nimport { URL_API } from '../services/contants';\nimport { localStorageUtils } from '../utils/localStorageUtils';\nimport { RootStore } from './RootStore';\nimport { LOADING_STATE } from './types/types';\n\nexport type UserInfoType = {\n  name: string;\n  gender: string;\n};\n\nconst accessToken = localStorageUtils.getAccessToken();\n\nexport class UserStore {\n  rootStore: RootStore;\n  userInfo = {\n    username: '',\n    gender: '',\n    isUserAuthenticate: !!accessToken,\n  };\n\n  tokens = {\n    accessToken: accessToken ? accessToken : '',\n  };\n\n  loadingState: LOADING_STATE = LOADING_STATE.NEVER;\n  userAuthDataError = '';\n\n  constructor(rootStore: RootStore) {\n    makeAutoObservable(this);\n    this.rootStore = rootStore;\n  }\n\n  setCurrentUserInfo(userInfo: UserInfoType): void {\n    const { name: username, gender } = userInfo;\n\n    this.userInfo = {\n      username,\n      gender,\n      isUserAuthenticate: true,\n    };\n  }\n\n  setAccessToken(accessToken: string): void {\n    this.tokens = {\n      accessToken,\n    };\n    this.userInfo.isUserAuthenticate = true;\n    localStorageUtils.setAccessToken(accessToken);\n  }\n\n  clearUserInfo(): void {\n    localStorageUtils.clearLocalStorage();\n\n    this.userInfo = {\n      username: '',\n      gender: '',\n      isUserAuthenticate: false,\n    };\n  }\n\n  setError(error: string): void {\n    this.userAuthDataError = error;\n  }\n\n  clearError(): void {\n    this.userAuthDataError = '';\n  }\n\n  setLoadingState(loadingState: LOADING_STATE): void {\n    this.loadingState = loadingState;\n  }\n\n  async sendUserAuthData<R>(userData: FormData, url: string): Promise<R | undefined> {\n    this.loadingState = LOADING_STATE.PENDING;\n\n    try {\n      return await fetch(`${URL_API}${url}`, {\n        method: 'POST',\n        body: userData,\n      }).then((response) => {\n        if (response.status === 200) {\n          if (this.userAuthDataError) {\n            runInAction(() => {\n              this.clearError();\n            });\n          }\n          return response.json();\n        } else {\n          response.text().then((error) => {\n            runInAction(() => {\n              this.setError(error);\n            });\n          });\n        }\n      });\n    } catch (e) {\n      runInAction(() => {\n        this.setError((e as Error).message);\n      });\n    } finally {\n      this.loadingState = LOADING_STATE.LOADED;\n    }\n  }\n}\n","import { createContext } from 'react';\nimport { GenderListStore } from './genderListStore';\nimport { DialogStore } from './dialogStore';\nimport { UserListStore } from './userListStore';\nimport { UserStore } from './userStore';\n\nexport class RootStore {\n  userStore = new UserStore(this);\n  userListStore = new UserListStore(this);\n  dialogStore = new DialogStore(this);\n  genderListStore = new GenderListStore(this);\n\n  constructor() {\n    this.userStore = new UserStore(this);\n    this.genderListStore = new GenderListStore(this);\n    this.dialogStore = new DialogStore(this);\n  }\n}\n\nexport const RootStoreContext = createContext(new RootStore());\n","export const SUPPORTED_FORMATS = {\n  VIDEO: ['video/mp4', 'video/ogg', 'video/webm'],\n  AUDIO: ['audio/mpeg', 'audio/ogg'],\n  IMAGE: ['image/jpg', 'image/jpeg', 'image/gif', 'image/png', 'image/svg+xml'],\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Wrapper } from '../../atoms/Wrapper';\nimport { ButtonIcon } from '../../molecules/ButtonIcon';\nimport { ColorType, IconName } from '../../atoms/Icon/types/types';\nimport { ButtonType } from '../../atoms/Button/types/types';\nimport { IUseFileReader } from '../../../hooks/useFileReader';\nimport { SUPPORTED_FORMATS } from '../MessageForm/constants/constants';\n\nimport './filePreview.scss';\n\ninterface IFilePreview {\n  handleDeletePreviewFile: () => void;\n  previewFileState: IUseFileReader;\n}\n\nexport const FilePreview: React.FC<IFilePreview> = ({\n  previewFileState,\n  handleDeletePreviewFile,\n}) => {\n  const { isVisiblePreviewFile, fileInfo, handleSetIsVisiblePreview } = previewFileState;\n\n  return (\n    <Wrapper\n      className={classNames('preview', {\n        preview_active: isVisiblePreviewFile,\n      })}\n    >\n      <Wrapper className=\"preview__wrapper\" flex>\n        {SUPPORTED_FORMATS.VIDEO.includes(fileInfo.type) && (\n          <Wrapper className=\"preview__video\">\n            <video controls>\n              <source src={fileInfo.src} type={fileInfo.type}></source>\n            </video>\n          </Wrapper>\n        )}\n\n        {SUPPORTED_FORMATS.IMAGE.includes(fileInfo.type) && (\n          <Wrapper className=\"preview__image\">\n            <img src={fileInfo.src} />\n          </Wrapper>\n        )}\n\n        {SUPPORTED_FORMATS.AUDIO.includes(fileInfo.type) && (\n          <Wrapper className=\"preview__audio\">\n            <audio controls>\n              <source src={fileInfo.src} type={fileInfo.type} />\n            </audio>\n          </Wrapper>\n        )}\n\n        <Wrapper className=\"preview__buttons\">\n          <ButtonIcon\n            className={'preview__button'}\n            type={ButtonType.button}\n            iconName={IconName.closeCircleIcon}\n            color={ColorType.primary}\n            onClick={handleSetIsVisiblePreview}\n          />\n\n          <ButtonIcon\n            className={'preview__button'}\n            type={ButtonType.button}\n            iconName={IconName.deleteIcon}\n            color={ColorType.error}\n            onClick={handleDeletePreviewFile}\n          />\n        </Wrapper>\n      </Wrapper>\n    </Wrapper>\n  );\n};\n","import { useCallback, useState } from 'react';\n\nexport type FileInfoType = {\n  src: string;\n  type: string;\n  size: number;\n  name: string;\n};\n\nexport interface IUseFileReader {\n  fileInfo: FileInfoType;\n  isLoaded: boolean;\n  isVisiblePreviewFile: boolean;\n  uniqueKeyInput: number;\n  setFileInfo: (fileInfo: FileInfoType) => void;\n  handleSetIsVisiblePreview: () => void;\n  handleDeleteFile: () => void;\n  handleResetUniqueKey: () => void;\n}\n\nconst initialFileInfoState = {\n  src: '',\n  type: '',\n  size: 0,\n  name: '',\n};\n\nexport const useFileReader = (): [IUseFileReader, (file: File) => void] => {\n  const [isLoaded, setIsLoaded] = useState<boolean>(false);\n  const [fileInfo, setFileInfo] = useState<FileInfoType>(initialFileInfoState);\n  const [isVisiblePreviewFile, setIsVisiblePreviewFile] = useState<boolean>(false);\n  const [uniqueKeyInput, resetUniqueKeyInput] = useState<number>(Date.now());\n\n  const loadFile = useCallback((file: File) => {\n    const reader = new FileReader();\n    setIsVisiblePreviewFile(false);\n\n    reader.onload = function () {\n      setFileInfo({\n        src: reader.result as string,\n        type: file.type,\n        size: file.size,\n        name: file.name,\n      });\n      setIsLoaded(true);\n      setIsVisiblePreviewFile(true);\n    };\n\n    reader.readAsDataURL(file);\n  }, []);\n\n  const handleSetIsVisiblePreview = useCallback(() => {\n    setIsVisiblePreviewFile(!isVisiblePreviewFile);\n  }, [isVisiblePreviewFile]);\n\n  const handleDeleteFile = useCallback(() => {\n    setFileInfo(initialFileInfoState);\n    setIsVisiblePreviewFile(false);\n  }, []);\n\n  const handleResetUniqueKey = useCallback(() => {\n    resetUniqueKeyInput(Date.now());\n  }, []);\n\n  return [\n    {\n      fileInfo,\n      isLoaded,\n      isVisiblePreviewFile,\n      uniqueKeyInput,\n      setFileInfo,\n      handleSetIsVisiblePreview,\n      handleDeleteFile,\n      handleResetUniqueKey,\n    },\n    loadFile,\n  ];\n};\n","import { SUPPORTED_FORMATS } from '../components/organism/MessageForm/constants/constants';\n\nexport const validateFile = (\n  file: File\n): { isValid: boolean; isTypeError: boolean; isSizeError: boolean } => {\n  const isSizeError = file.size >= 2 * 1024 * 1024;\n\n  const isTypeError = ![\n    ...SUPPORTED_FORMATS.VIDEO,\n    ...SUPPORTED_FORMATS.AUDIO,\n    ...SUPPORTED_FORMATS.IMAGE,\n  ].includes(file.type);\n\n  return {\n    isValid: !isSizeError && !isTypeError,\n    isTypeError,\n    isSizeError,\n  };\n};\n","import React, { useCallback, useContext, useEffect, useRef } from 'react';\nimport classNames from 'classnames';\nimport { useForm, Controller, SubmitHandler, FieldValues } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { Wrapper } from '../../atoms/Wrapper';\nimport { Typography } from '../../atoms/Typography';\nimport { ButtonIcon } from '../../molecules/ButtonIcon';\nimport { FileInput } from '../../molecules/FileInput';\nimport { FormInput } from '../../molecules/FormInput';\nimport { ButtonType } from '../../atoms/Button/types/types';\nimport { ColorType, IconName } from '../../atoms/Icon/types/types';\nimport { InputId, InputType } from '../../molecules/FormInput/types/types';\nimport { RootStoreContext } from '../../../store/RootStore';\nimport { URL, HTTP_PORT } from '../../../services/contants';\nimport { FilePreview } from '../FilePreview';\nimport { useFileReader } from '../../../hooks/useFileReader';\nimport { validateFile } from '../../../utils/validateFile';\nimport { LOADING_STATE, MessageType } from '../../../store/types/types';\nimport { TypographyTypeStyle } from '../../atoms/Typography/types/types';\nimport { IFormInput, IMessageForm } from './types/types';\n\nimport './messageForm.scss';\n\nconst schema = yup.object().shape({\n  messageText: yup.string(),\n});\n\nexport const MessageForm: React.FC<IMessageForm> = ({ WSAction }) => {\n  const { dialogStore, userStore } = useContext(RootStoreContext);\n  const [previewFileState, setPreviewFileState] = useFileReader();\n  const isFileLoading = dialogStore.loadingState === LOADING_STATE.PENDING;\n\n  const message = useRef<MessageType>({\n    text: '',\n    fromUser: '',\n    forUser: '',\n    fileLink: '',\n    createdAt: null,\n  });\n\n  const {\n    handleSubmit,\n    control,\n    reset,\n    clearErrors,\n    setError,\n    formState: { errors, isValid, isSubmitSuccessful },\n  } = useForm<FieldValues>({\n    mode: 'onChange',\n    resolver: yupResolver(schema),\n    defaultValues: {\n      messageText: '',\n      files: [],\n    },\n  });\n\n  const fileErrors = errors.files?.message || dialogStore.currentDialogError;\n\n  const handleDeletePreviewFile = useCallback(() => {\n    previewFileState.handleDeleteFile();\n    previewFileState.handleResetUniqueKey();\n    reset({ files: [] });\n  }, [previewFileState, reset]);\n\n  const onSubmit: SubmitHandler<IFormInput> = async (data) => {\n    const formData = new FormData();\n\n    message.current = {\n      text: data.messageText,\n      fromUser: userStore.userInfo.username,\n      forUser: dialogStore.currentDialogInfo.companion.username,\n      createdAt: Date.now(),\n    };\n\n    if (data.files?.name) {\n      formData.append('0', data.files, data.files.name);\n      const fileLink = await dialogStore.sendMessageFile<string>(formData, '/upload');\n\n      message.current.fileLink = fileLink ? `${URL}:${HTTP_PORT}${fileLink}` : '';\n    }\n\n    if (message.current.text || message.current.fileLink) {\n      WSAction.sendMessage(`'${JSON.stringify(message.current)}'`);\n    }\n  };\n\n  const handleFileInputChange = useCallback(\n    (event: { target: HTMLInputElement }, onChangeHandler: (e: File) => void) => {\n      if (event.target.files?.length) {\n        const file = event.target.files[0];\n        if (validateFile(file).isValid) {\n          setPreviewFileState(file);\n          onChangeHandler(file);\n        }\n\n        validateFile(file).isSizeError &&\n          setError('files', { type: 'fileError', message: 'Размер файла должен быть меньше 2 мб' });\n\n        validateFile(file).isTypeError &&\n          setError('files', { type: 'fileError', message: `Данный тип не поддерживается` });\n      }\n    },\n    [setPreviewFileState, setError]\n  );\n\n  useEffect(() => {\n    if (isSubmitSuccessful) {\n      handleDeletePreviewFile();\n\n      reset({ files: [], messageText: '' });\n      message.current = {\n        text: '',\n        fromUser: '',\n        forUser: '',\n        createdAt: null,\n      };\n    }\n  }, [isSubmitSuccessful, previewFileState, handleDeletePreviewFile, reset]);\n\n  useEffect(() => {\n    if (fileErrors) {\n      () => previewFileState.handleResetUniqueKey();\n\n      setTimeout(() => {\n        clearErrors('files');\n        dialogStore.clearError();\n        previewFileState.handleResetUniqueKey();\n      }, 1000);\n    }\n  }, [clearErrors, previewFileState, fileErrors, dialogStore]);\n\n  return (\n    <form className=\"message-form\" onSubmit={handleSubmit(onSubmit)}>\n      <Wrapper className=\"message-form__preview-block\">\n        <FilePreview\n          previewFileState={previewFileState}\n          handleDeletePreviewFile={handleDeletePreviewFile}\n        />\n      </Wrapper>\n\n      {previewFileState.fileInfo.name && (\n        <ButtonIcon\n          className={classNames('message-form__preview-button', {\n            'message-form__preview-button_active': !previewFileState.isVisiblePreviewFile,\n          })}\n          iconName={IconName.arrowDown}\n          type={ButtonType.button}\n          onClick={previewFileState.handleSetIsVisiblePreview}\n        />\n      )}\n\n      <Wrapper flex align=\"center\" className=\"message-form__inner\">\n        <Controller\n          name={InputId.files}\n          control={control}\n          render={({ field }) => (\n            <FileInput\n              id={InputId.files}\n              className=\"message-form__file-input\"\n              field={field}\n              handleFileInputChange={handleFileInputChange}\n              uniqueKey={previewFileState.uniqueKeyInput}\n              errorText={fileErrors}\n            />\n          )}\n        />\n\n        <Controller\n          name={InputId.messageText}\n          control={control}\n          render={({ field }) => (\n            <FormInput placeholder=\"Write something...\" type={InputType.textarea} field={field} />\n          )}\n        />\n\n        <Typography\n          variant={TypographyTypeStyle.span}\n          className={classNames('message-form__tooltip', {\n            'message-form__tooltip_active': isFileLoading,\n          })}\n        >\n          Идет отправка файла...\n        </Typography>\n\n        <ButtonIcon\n          iconName={isFileLoading ? IconName.spinnerCircle : IconName.sendMessage}\n          type={ButtonType.submit}\n          color={ColorType.primary}\n          className=\"message-form__button\"\n          isDisabled={!isValid || isFileLoading}\n        />\n      </Wrapper>\n    </form>\n  );\n};\n","import { UserGender } from '../components/atoms/Avatar/types/types';\nimport { IconName } from '../components/atoms/Icon/types/types';\n\nexport const checkUserAvatar = (gender: string | undefined): string => {\n  if (gender === UserGender.male) return IconName.maleAvatar;\n  if (gender === UserGender.female) return IconName.femaleAvatar;\n\n  return IconName.noUserAvatar;\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Icon } from '../Icon';\nimport { AvatarSize } from './types/types';\nimport { checkUserAvatar } from '../../../utils/checkUserAvatar';\n\nimport './avatar.scss';\n\ninterface IAvatar {\n  size: AvatarSize;\n  gender: string;\n  className?: string;\n}\n\nexport const Avatar: React.FC<IAvatar> = ({ size, gender, className }) => {\n  const classProps = classNames('avatar', {\n    [`avatar_size_${size}`]: size,\n    [`${className}`]: className,\n  });\n  return <Icon className={classProps} name={checkUserAvatar(gender)} />;\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Avatar } from '../../atoms/Avatar';\nimport { Typography } from '../../atoms/Typography';\nimport { Wrapper } from '../../atoms/Wrapper';\nimport { TypographyTypeStyle } from '../../atoms/Typography/types/types';\nimport { AvatarSize } from '../../atoms/Avatar/types/types';\n\nimport './userStatus.scss';\n\ninterface IUserStatus {\n  username: string;\n  userStatus: string;\n  gender: string;\n  className?: string;\n}\n\nexport const UserStatus: React.FC<IUserStatus> = ({ username, userStatus, gender, className }) => {\n  const classProps = classNames('user-status', {\n    [`${className}`]: className,\n  });\n\n  return (\n    <Wrapper flex row className={classProps}>\n      <Avatar size={AvatarSize.small} gender={gender} className=\"user-status__avatar\" />\n      <Wrapper flex column>\n        <Typography variant={TypographyTypeStyle.h3} className=\"user-status__username\">\n          {username}\n        </Typography>\n        <Typography variant={TypographyTypeStyle.p1} className=\"user-status__last-seen\">\n          {userStatus}\n        </Typography>\n      </Wrapper>\n    </Wrapper>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Wrapper } from '../../atoms/Wrapper';\nimport { ButtonIcon } from '../../molecules/ButtonIcon';\nimport { UserStatus } from '../../molecules/UserStatus';\nimport { ButtonType } from '../../atoms/Button/types/types';\nimport { ColorType, IconName } from '../../atoms/Icon/types/types';\n\nimport './statusBar.scss';\n\ninterface IStatusBar {\n  isVisibleUserList: boolean;\n  dialogInfo: { username: string; gender: string; lastSeen: string };\n  handleVisibleUserList: () => void;\n}\n\nexport const StatusBar: React.FC<IStatusBar> = ({\n  isVisibleUserList,\n  dialogInfo,\n  handleVisibleUserList,\n}) => {\n  return (\n    <Wrapper flex align=\"center\" className=\"status-bar\">\n      <ButtonIcon\n        iconName={isVisibleUserList ? IconName.closeIcon : IconName.userList}\n        type={ButtonType.button}\n        color={ColorType.primary}\n        onClick={handleVisibleUserList}\n        className={classNames('status-bar__user-list-icon', {\n          ['status-bar__user-list-icon_transform']: isVisibleUserList,\n        })}\n      />\n\n      <ButtonIcon\n        iconName={IconName.arrowLeft}\n        type={ButtonType.button}\n        color={ColorType.primary}\n        onClick={() => history.back()}\n        className={'status-bar__back-icon'}\n      />\n\n      <UserStatus\n        className=\"status-bar__user-status\"\n        username={dialogInfo.username}\n        userStatus={dialogInfo.lastSeen}\n        gender={dialogInfo.gender}\n      />\n    </Wrapper>\n  );\n};\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { Avatar } from '../../atoms/Avatar';\nimport { Typography } from '../../atoms/Typography';\nimport { UserGender, AvatarSize } from '../../atoms/Avatar/types/types';\nimport { Wrapper } from '../../atoms/Wrapper';\nimport { ColorType } from '../../atoms/Icon/types/types';\nimport { TypographyTypeStyle } from '../../atoms/Typography/types/types';\nimport { SCREENS } from '../../../router/endpoints';\n\nimport './userListItem.scss';\n\nexport interface IUserListItem {\n  name: string;\n  gender: UserGender;\n  id: string;\n  setDialogInfo: (username: string, lastseen: string, id: string, gender: UserGender) => void;\n  isCurrentUserLastMessage?: boolean;\n  lastMessage?: string;\n}\n\nexport const UserListItem = React.memo(function UserListItem({\n  name,\n  gender,\n  id,\n  isCurrentUserLastMessage,\n  lastMessage,\n  setDialogInfo,\n}: IUserListItem) {\n  return (\n    <NavLink\n      to={`${SCREENS.SCREEN_DIALOGS}/${id}`}\n      className=\"user-list__link\"\n      activeClassName=\"user-list__link_active\"\n      onClick={() => setDialogInfo(name, 'Last seen 3 seconds ago', id, gender)}\n    >\n      <Avatar size={AvatarSize.medium} gender={gender} className=\"link__avatar\" />\n      <Wrapper className=\"link__info\">\n        <Typography variant={TypographyTypeStyle.h4} className={'link__username'}>\n          {name}\n        </Typography>\n        <Typography variant={TypographyTypeStyle.p2} className={'link__last-message'}>\n          {isCurrentUserLastMessage && (\n            <Typography variant={TypographyTypeStyle.span} color={ColorType.primary}>\n              You:{' '}\n            </Typography>\n          )}\n          {lastMessage}Last message from user\n        </Typography>\n      </Wrapper>\n    </NavLink>\n  );\n});\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Avatar } from '../../atoms/Avatar';\nimport { Typography } from '../../atoms/Typography';\nimport { TypographyTypeStyle } from '../../atoms/Typography/types/types';\nimport { AvatarSize, UserGender } from '../../atoms/Avatar/types/types';\n\nimport './userListNotification.scss';\n\ninterface IUserListNotification {\n  className: string;\n}\n\nexport const UserListNotification: React.FC<IUserListNotification> = ({ className }) => {\n  const classProps = classNames('no-user-block', {\n    [`${className}`]: className,\n  });\n  return (\n    <div className={classProps}>\n      <Avatar size={AvatarSize.large} gender={UserGender.noGender} />\n      <Typography variant={TypographyTypeStyle.p2} className=\"no-user-block__text\">\n        There is no other users yet\n      </Typography>\n    </div>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Wrapper } from '../../atoms/Wrapper';\nimport { Icon } from '../../atoms/Icon';\nimport { IconName } from '../../atoms/Icon/types/types';\n\nimport './spinner.scss';\n\ninterface ISpinner {\n  className?: string;\n}\n\nexport const Spinner: React.FC<ISpinner> = ({ className }) => {\n  const classProps = classNames('spinner', {\n    [`${className}`]: className,\n  });\n  return (\n    <Wrapper className={classProps}>\n      <Icon name={IconName.spiner} className=\"spinner__icon\" />\n    </Wrapper>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { IUserListItem, UserListItem } from '../../molecules/UserListItem';\nimport { UserListNotification } from '../../molecules/UserListNotification';\nimport { Spinner } from '../../molecules/Spinner';\nimport { UserGender } from '../../atoms/Avatar/types/types';\n\nimport './userList.scss';\n\ninterface IUserList {\n  isVisibleUserList: boolean;\n  listRef: React.RefObject<HTMLDivElement>;\n  users: IUserListItem[];\n  isLoaded: boolean;\n  handleVisibleUserList: () => void;\n  setDialogInfo: (username: string, lastseen: string, id: string, gender: UserGender) => void;\n}\n\nexport const UserList: React.FC<IUserList> = ({\n  isVisibleUserList,\n  listRef,\n  users,\n  isLoaded,\n  setDialogInfo,\n  handleVisibleUserList,\n}): React.ReactElement => {\n  const classProps = classNames('user-list', {\n    ['user-list_active']: isVisibleUserList,\n  });\n\n  return (\n    <div ref={listRef} className={classProps} onClick={handleVisibleUserList}>\n      {isLoaded ? (\n        users.length ? (\n          users.map((user, index) => (\n            <UserListItem\n              setDialogInfo={setDialogInfo}\n              key={`${user.name}_${index}`}\n              id={`${user.name}_${index}`}\n              name={user.name}\n              gender={user.gender}\n              lastMessage={user.lastMessage}\n              isCurrentUserLastMessage={user.isCurrentUserLastMessage}\n            />\n          ))\n        ) : (\n          <UserListNotification className=\"user-list__no-user-block\" />\n        )\n      ) : (\n        <Spinner className=\"user-list__spinner\" />\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport './mainContainer.scss';\n\ninterface IMainContainer {\n  page?: string;\n}\n\nexport const MainContainer: React.FC<IMainContainer> = ({ children, page }) => {\n  const classProps = classNames('main-container', {\n    [`${page}-page__main-container`]: page,\n  });\n\n  return <main className={classProps}>{children}</main>;\n};\n","export enum SIGN_UP_FIELDS {\n  login = 'login',\n  password = 'password',\n  passwordConfirm = 'password_confirm',\n  nickname = 'name',\n  gender = 'gender_id',\n  captcha = 'captcha',\n}\n","import React from 'react';\nimport { useRouteMatch } from 'react-router';\nimport { Wrapper } from '../../atoms/Wrapper';\nimport { MainContainer } from '../MainContainer';\nimport { Pages, SCREENS } from '../../../router/endpoints';\nimport { useWindowSize } from '../../../hooks/useWindowSize';\nimport { WindowSize } from '../../../hooks/constants';\n\nimport './chatPageTemplate.scss';\n\ninterface IChatPageTemplate {\n  header?: React.ReactElement;\n  userList?: React.ReactElement;\n  statusBar?: React.ReactElement;\n  dialog?: React.ReactElement;\n  messageForm?: React.ReactElement;\n  notificationButton?: React.ReactElement;\n  errorModal?: React.ReactElement;\n}\n\nexport const ChatPageTemplate: React.FC<IChatPageTemplate> = ({\n  header,\n  userList,\n  statusBar,\n  dialog,\n  messageForm,\n  notificationButton,\n  errorModal,\n}): React.ReactElement | null => {\n  const size = useWindowSize();\n  const isCurrentDialogPage = useRouteMatch(`${SCREENS.SCREEN_CURRENT_DIALOG}`);\n  const isDialogsPage = useRouteMatch(`${SCREENS.SCREEN_DIALOGS}`);\n\n  return (\n    <MainContainer page={Pages.chat}>\n      {errorModal}\n      {(size.width > WindowSize.SIZE_MOBILE_L || isDialogsPage?.isExact) && header}\n\n      <main className=\"chat-page__inner\">\n        {(size.width > WindowSize.SIZE_MOBILE_L || isDialogsPage?.isExact) && userList}\n\n        <Wrapper className=\"chat-page__dialog\">\n          {isCurrentDialogPage ? (\n            <>\n              {statusBar}\n              {dialog}\n              {messageForm}\n            </>\n          ) : (\n            notificationButton\n          )}\n        </Wrapper>\n      </main>\n    </MainContainer>\n  );\n};\n","import { useEffect, useState } from 'react';\n\ntype WindowSizeType = {\n  width: number;\n};\n\nexport function useWindowSize(): WindowSizeType {\n  const [windowSize, setWindowSize] = useState<WindowSizeType>({ width: 0 });\n\n  useEffect(() => {\n    function handleWindowResize() {\n      setWindowSize({ width: window.innerWidth });\n    }\n\n    window.addEventListener('resize', handleWindowResize);\n    handleWindowResize();\n    return () => window.removeEventListener('resize', handleWindowResize);\n  }, []);\n\n  return windowSize;\n}\n","import React, { useContext } from 'react';\nimport { Typography } from '../../atoms/Typography';\nimport { TypographyTypeStyle } from '../../atoms/Typography/types/types';\nimport { Wrapper } from '../../atoms/Wrapper';\nimport { Button } from '../../atoms/Button';\nimport { ButtonType, ButtonVariant } from '../../atoms/Button/types/types';\nimport { RootStoreContext } from '../../../store/RootStore';\n\nimport './modal.scss';\n\ninterface IModal {\n  notificationText?: string;\n  isError?: boolean;\n}\n\nexport const Modal: React.FC<IModal> = ({ notificationText, isError }) => {\n  const { userStore } = useContext(RootStoreContext);\n\n  const handleButtonClick = () => {\n    userStore.clearUserInfo();\n  };\n\n  return (\n    <Wrapper className={'modal'}>\n      <Wrapper className=\"modal__wrapper\">\n        <Typography variant={TypographyTypeStyle.h3} className=\"modal__header-text\">\n          Похоже что-то пошло не так...\n        </Typography>\n\n        <Typography variant={TypographyTypeStyle.p1} className=\"modal__info-text\">\n          Попытка подключения завершилась неудачно, текст ошибки :\n          <Typography variant={TypographyTypeStyle.span} className=\"modal__error-text\">\n            {notificationText === 'error' ? 'Проверьте подключение к сети' : notificationText}\n          </Typography>\n        </Typography>\n\n        <Typography variant={TypographyTypeStyle.p1} className=\"modal__info-text\">\n          Пожалуйста, вернитесь на страницу авторизации и попробуйте войти снова.\n        </Typography>\n\n        <Button\n          type={ButtonType.button}\n          variant={ButtonVariant.notification}\n          className=\"modal__button\"\n          onClick={handleButtonClick}\n        >\n          На страницу авторизации\n        </Button>\n      </Wrapper>\n    </Wrapper>\n  );\n};\n","import React, { useEffect, useRef, useContext, useState } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Button } from '../../components/atoms/Button';\nimport { Dialog } from '../../components/organism/Dialog';\nimport { Header } from '../../components/organism/Header';\nimport { MessageForm } from '../../components/organism/MessageForm';\nimport { StatusBar } from '../../components/organism/StatusBar';\nimport { UserList } from '../../components/organism/UserList';\nimport { ChatPageTemplate } from '../../components/templates/ChatPageTemplate';\nimport { RootStoreContext } from '../../store/RootStore';\nimport { LOADING_STATE } from '../../store/types/types';\nimport { ButtonType, ButtonVariant } from '../../components/atoms/Button/types/types';\nimport { useWebsocket } from '../../hooks/useWebsocket';\nimport { UserGender } from '../../components/atoms/Avatar/types/types';\nimport { Modal } from '../../components/organism/Modal';\n\nexport const ChatPage = observer((): React.ReactElement => {\n  const [isVisibleUserList, setIsVisibleUserList] = useState<boolean>(false);\n  const { userListStore, dialogStore, userStore } = useContext(RootStoreContext);\n  const currentUsername = userStore.userInfo.username;\n  const currentGender = userStore.userInfo.gender;\n  const messages = dialogStore.getDialogInfo();\n\n  const [wsState, WSAction] = useWebsocket('test');\n\n  const userListRef = useRef<HTMLDivElement>(null);\n  const handleVisibleUserList = React.useCallback(() => {\n    setIsVisibleUserList(!isVisibleUserList);\n  }, [isVisibleUserList]);\n\n  const setDialogInfo = React.useCallback(\n    (username: string, lastseen: string, id: string, gender: UserGender) => {\n      dialogStore.setCurrentDialogInfo(username, lastseen, id, gender);\n    },\n\n    [dialogStore]\n  );\n\n  useEffect(() => {\n    if (wsState.isOpen) {\n      WSAction.fetchUserData();\n      WSAction.fetchUserList();\n    }\n  }, [WSAction, wsState.isOpen]);\n\n  useEffect(() => {\n    if (wsState.isOpen && currentUsername) {\n      WSAction.sendUserJoinedInfo(currentUsername, currentGender);\n    }\n  }, [WSAction, wsState.isOpen, currentUsername, currentGender]);\n\n  return (\n    <>\n      <ChatPageTemplate\n        errorModal={wsState.error ? <Modal isError notificationText={wsState.error} /> : undefined}\n        header={<Header isChatPage />}\n        userList={\n          <UserList\n            setDialogInfo={setDialogInfo}\n            users={userListStore.userList}\n            isLoaded={userListStore.loadingState === LOADING_STATE.LOADED}\n            listRef={userListRef}\n            handleVisibleUserList={handleVisibleUserList}\n            isVisibleUserList={isVisibleUserList}\n          />\n        }\n        statusBar={\n          <StatusBar\n            isVisibleUserList={isVisibleUserList}\n            handleVisibleUserList={handleVisibleUserList}\n            dialogInfo={dialogStore.currentDialogInfo.companion}\n          />\n        }\n        dialog={\n          <Dialog\n            dialogMessages={messages?.dialogMessages}\n            currentUsername={userStore.userInfo.username}\n          />\n        }\n        messageForm={\n          dialogStore.currentDialogId ? <MessageForm WSAction={WSAction} /> : <span>dsf</span>\n        }\n        notificationButton={\n          <Button\n            variant={ButtonVariant.notification}\n            type={ButtonType.button}\n            className=\"chat-page__button_notification\"\n            onClick={handleVisibleUserList}\n          >\n            Select a chat to start messaging\n          </Button>\n        }\n      />\n    </>\n  );\n});\n","import { useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { RootStoreContext } from '../store/RootStore';\nimport { webSocketMessage, WS_API } from '../services/contants';\nimport { IWSAction, WebSocketMessageType } from '../services/types';\n\ntype Result<T> = T | undefined;\n\ninterface IWSState<T> {\n  result: Result<T>;\n  error: string;\n  isOpen: boolean;\n  isClosed: boolean;\n}\n\nexport const useWebsocket = <T = Record<string, unknown>>(\n  type: string\n): [IWSState<T>, IWSAction] => {\n  const { userStore, userListStore, dialogStore } = useContext(RootStoreContext);\n  const ws = useRef<WebSocket | null>();\n\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const [error, setError] = useState<string>('');\n  const [result, setResult] = useState<Result<T>>();\n  const [isClosed, setIsClosed] = useState<boolean>(false);\n\n  const accessToken = userStore.tokens.accessToken;\n\n  const params = `/?type=${type}&ws_id=`;\n\n  useEffect(() => {\n    if (accessToken) {\n      ws.current = new WebSocket(`${WS_API}${params}${accessToken}`);\n    }\n\n    return () => {\n      ws.current?.close();\n      setIsClosed(true);\n    };\n  }, [accessToken, params]);\n\n  useEffect(() => {\n    if (!ws.current) return;\n\n    ws.current.onopen = () => {\n      setIsOpen(true);\n    };\n\n    ws.current.onerror = (event: Event) => {\n      setError(event.type);\n      console.log(event);\n    };\n\n    ws.current.onclose = () => {\n      setTimeout(() => {\n        ws.current?.close();\n      }, 1000);\n      setIsClosed(true);\n    };\n\n    if (ws.current) {\n      ws.current.onmessage = (event: MessageEvent) => {\n        if (event.data.includes(`Get param 'ws_id' - is wrong! Please relogin!`)) {\n          return setError(event.data);\n        }\n\n        const reverseData = event.data.replaceAll(\"'\", '');\n        const { type: eventType, ...wsResponse } = JSON.parse(reverseData);\n\n        if (eventType === WebSocketMessageType.sendMessage) {\n          dialogStore.updateCurrentDialogMessages(JSON.parse(wsResponse.data.message));\n        }\n\n        if (eventType === WebSocketMessageType.usersList) {\n          userListStore.setUserList(wsResponse.data);\n        }\n\n        if (eventType === WebSocketMessageType.userData) {\n          userStore.setCurrentUserInfo(wsResponse.data);\n        }\n\n        if (eventType === WebSocketMessageType.sendUserJoinedInfo) {\n          userListStore.updateUserList(wsResponse.data);\n        }\n\n        setResult(wsResponse.data);\n      };\n    }\n  }, [userListStore, userStore, dialogStore]);\n\n  const send = (messageType: WebSocketMessageType, data?: Record<string, unknown>) => {\n    if (messageType === WebSocketMessageType.sendMessage) {\n      return ws.current?.send(`'${JSON.stringify({ type: messageType, data })}'`);\n    }\n\n    if (messageType === WebSocketMessageType.sendUserJoinedInfo) {\n      return ws.current?.send(`'${JSON.stringify({ type: messageType, data })}'`);\n    }\n\n    return ws.current?.send(JSON.stringify({ type: messageType, ...data }));\n  };\n\n  const WSAction = useMemo(() => {\n    const fetchUserList = () => webSocketMessage.fetchUserList(send);\n    const fetchUserData = () => webSocketMessage.fetchUserData(send);\n    const sendMessage = (text: string) => webSocketMessage.sendMessage(send, text);\n    const sendUserJoinedInfo = (username: string, gender: string) =>\n      webSocketMessage.sendUserJoinedInfo(send, username, gender);\n\n    return { fetchUserList, fetchUserData, sendMessage, sendUserJoinedInfo };\n  }, []);\n\n  return [{ isOpen, error, result, isClosed }, WSAction];\n};\n","import { URL_API } from './contants';\n\nexport const fetchApi = {\n  fetchCaptcha: async (\n    setCaptchaURL: (captchaURL: string) => void,\n    setIsLoaded: (isLoaded: boolean) => void\n  ): Promise<void> => {\n    setIsLoaded(false);\n    setCaptchaURL('');\n\n    try {\n      await fetch(`${URL_API}/auth/captcha?t=${Date.now()}`).then((res) => {\n        if (res.status === 200) {\n          setCaptchaURL(res.url);\n        }\n      });\n    } catch (e) {\n      setCaptchaURL('');\n    } finally {\n      setIsLoaded(true);\n    }\n  },\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { Wrapper } from '../../atoms/Wrapper';\nimport { ButtonIcon } from '../ButtonIcon';\nimport { ButtonType } from '../../atoms/Button/types/types';\nimport { ColorType, IconName } from '../../atoms/Icon/types/types';\nimport { Spinner } from '../Spinner';\nimport { fetchApi } from '../../../services/api';\n\nimport './captchaBlock.scss';\n\nexport const CaptchaBlock = React.memo(function CaptchaBlock(): React.ReactElement {\n  const [captchaURL, setCaptchaURL] = useState<string>('');\n  const [isLoaded, setIsLoaded] = useState<boolean>(false);\n\n  const handlerCaptchaURL = useCallback(() => {\n    fetchApi.fetchCaptcha(setCaptchaURL, setIsLoaded);\n  }, []);\n\n  useEffect(() => {\n    handlerCaptchaURL();\n  }, [handlerCaptchaURL]);\n\n  return (\n    <Wrapper flex align=\"center\" className=\"captcha-block\">\n      {isLoaded ? (\n        !captchaURL ? (\n          <span>Failed to fetch captcha</span>\n        ) : (\n          <img src={`${captchaURL}`} alt=\"captcha\" />\n        )\n      ) : (\n        <Spinner className=\"captcha-block__spinner\" />\n      )}\n\n      <ButtonIcon\n        className=\"captcha-block__button\"\n        iconName={IconName.updateIcon}\n        color={ColorType.primary}\n        type={ButtonType.button}\n        onClick={handlerCaptchaURL}\n      />\n    </Wrapper>\n  );\n});\n","import { SIGN_UP_FIELDS } from './constants';\n\nexport const convertDataToFormData = (data: Record<string, string>): FormData => {\n  const formData = new FormData();\n\n  formData.append(SIGN_UP_FIELDS.login, data.login);\n  formData.append(SIGN_UP_FIELDS.password, data.password);\n  formData.append(SIGN_UP_FIELDS.captcha, data.captcha);\n\n  data.passwordConfirm && formData.append(SIGN_UP_FIELDS.passwordConfirm, data.passwordConfirm);\n  data.nickname && formData.append(SIGN_UP_FIELDS.nickname, data.nickname);\n  data.gender && formData.append(SIGN_UP_FIELDS.gender, data.gender);\n\n  return formData;\n};\n","import { FieldValues, UseFormSetError } from 'react-hook-form';\nimport { ISignUpFormField } from '../components/organism/SignUpForm';\nimport { SIGN_UP_FIELDS } from './constants';\n\nexport const defineFieldError = (\n  errorText: string,\n  setError: UseFormSetError<FieldValues | ISignUpFormField>\n): void => {\n  for (const field in SIGN_UP_FIELDS) {\n    errorText.match(SIGN_UP_FIELDS.gender) &&\n      setError('gender', { message: 'Something wrong with this field' });\n\n    errorText.match(SIGN_UP_FIELDS.password) &&\n      setError('passwordConfirm', { message: 'Something wrong with this field' });\n\n    errorText.match(SIGN_UP_FIELDS.nickname) &&\n      setError('nickname', { message: 'Your name must be less than 50 letters' });\n\n    if (errorText.match(field)) {\n      setError(field, { message: errorText });\n    }\n  }\n};\n","import React, { useEffect } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { useForm, Controller, SubmitHandler, FieldValues } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { RootStoreContext } from '../../../store/RootStore';\nimport { Button } from '../../atoms/Button';\nimport { Typography } from '../../atoms/Typography';\nimport { Wrapper } from '../../atoms/Wrapper';\nimport { CaptchaBlock } from '../../molecules/CaptchaBlock';\nimport { FormInput } from '../../molecules/FormInput';\nimport { ButtonSize, ButtonType, ButtonVariant } from '../../atoms/Button/types/types';\nimport { InputId, InputSize, InputType } from '../../molecules/FormInput/types/types';\nimport { TypographyTypeStyle } from '../../atoms/Typography/types/types';\nimport { convertDataToFormData } from '../../../utils/convertDataToFormData';\nimport { defineFieldError } from '../../../utils/defineFieldError';\nimport { SCREENS } from '../../../router/endpoints';\n\nimport './loginForm.scss';\n\ninterface IFormInput {\n  login: string;\n  password: string;\n  captcha: string;\n}\n\nconst schema = yup.object().shape({\n  login: yup\n    .string()\n    .min(2, 'Your name must contain at least 2 letters')\n    .max(25, 'Your name must be less than 50 letters')\n    .required('Please input your name'),\n  password: yup.string().required('Please input your password'),\n  captcha: yup\n    .string()\n    .min(5, 'Min 5 symbols')\n    .max(5, 'Max 5 symbols')\n    .required('Please input captcha'),\n});\n\nexport const LoginForm = observer((): React.ReactElement => {\n  const { userStore } = React.useContext(RootStoreContext);\n\n  const {\n    handleSubmit,\n    control,\n    setError,\n    formState: { errors, isValid, isSubmitSuccessful },\n  } = useForm<FieldValues>({\n    mode: 'onChange',\n    resolver: yupResolver(schema),\n    defaultValues: {\n      login: '',\n      password: '',\n      captcha: '',\n    },\n  });\n\n  const onSubmit: SubmitHandler<IFormInput> = async (formData) => {\n    const accessToken = await userStore.sendUserAuthData<string>(\n      convertDataToFormData(formData),\n      '/auth/login'\n    );\n\n    accessToken && userStore.setAccessToken(accessToken);\n  };\n\n  useEffect(() => {\n    if (userStore.userAuthDataError && isSubmitSuccessful) {\n      defineFieldError(userStore.userAuthDataError, setError);\n    }\n  }, [setError, userStore, isSubmitSuccessful, userStore.userAuthDataError]);\n\n  return (\n    <Wrapper className=\"form-login\">\n      <Typography className=\"form-login__text\" variant={TypographyTypeStyle.h2}>\n        Please, autorize yourself\n      </Typography>\n\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Controller\n          name={InputId.login}\n          control={control}\n          render={({ field }) => (\n            <FormInput\n              placeholder={'User name'}\n              type={InputType.text}\n              labelText=\"User name\"\n              className=\"form-login__input\"\n              field={field}\n              errorText={errors.login?.message}\n            />\n          )}\n        />\n\n        <Controller\n          name={InputId.password}\n          control={control}\n          render={({ field }) => (\n            <FormInput\n              placeholder={'Input password'}\n              type={InputType.password}\n              labelText=\"Password\"\n              className=\"form-login__input\"\n              field={field}\n              errorText={errors.password?.message}\n            />\n          )}\n        />\n\n        <Wrapper flex className=\"form-login__security-code\">\n          <Controller\n            name={InputId.captcha}\n            control={control}\n            render={({ field }) => (\n              <FormInput\n                placeholder={'Security code'}\n                type={InputType.text}\n                labelText=\"Security code\"\n                className=\"form-login__input\"\n                field={field}\n                size={InputSize.medium}\n                errorText={errors.captcha?.message}\n              />\n            )}\n          />\n          <CaptchaBlock />\n        </Wrapper>\n\n        <Wrapper flex className=\"form-login__buttons\">\n          <Button\n            className=\"form-login__button\"\n            variant={ButtonVariant.primary}\n            size={ButtonSize.medium}\n            type={ButtonType.submit}\n            isDisabled={!isValid}\n          >\n            Log in\n          </Button>\n\n          <Button\n            className=\"form-login__button\"\n            variant={ButtonVariant.outline}\n            size={ButtonSize.medium}\n            type={ButtonType.button}\n            isNavLink\n            path={SCREENS.SCREEN_SIGN_UP}\n          >\n            Registration\n          </Button>\n        </Wrapper>\n      </form>\n    </Wrapper>\n  );\n});\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { UseFormClearErrors, UseFormSetValue } from 'react-hook-form';\nimport { Label } from '../../atoms/Label';\nimport { Typography } from '../../atoms/Typography';\nimport { Wrapper } from '../../atoms/Wrapper';\nimport { Icon } from '../../atoms/Icon';\nimport { ISignUpFormField } from '../../organism/SignUpForm';\nimport { ColorType, IconName } from '../../atoms/Icon/types/types';\nimport { TypographyTypeStyle } from '../../atoms/Typography/types/types';\n\nimport './formSelect.scss';\nimport { GendersListType } from '../../../store/types/types';\n\ninterface IFormSelect {\n  error: string | undefined;\n  className: string;\n  labelText: string;\n  options: GendersListType[];\n  setValue: UseFormSetValue<ISignUpFormField>;\n  clearErrors: UseFormClearErrors<ISignUpFormField>;\n}\n\nexport const FormSelect: React.FC<IFormSelect> = ({\n  labelText,\n  error,\n  className,\n  options,\n  setValue,\n  clearErrors,\n}) => {\n  const [isVisibleList, setIsVisibleList] = useState<boolean>(false);\n  const [genderValue, setGenderValue] = useState<string>('');\n\n  const classProps = classNames('select__list', {\n    ' select__list_active': isVisibleList,\n  });\n\n  return (\n    <Wrapper className=\"form-field\">\n      <Label labelText={labelText} className=\"form-field__label\" />\n\n      <Wrapper\n        className={classNames('select', {\n          ' select_notification_error': error,\n          [`${className}`]: className,\n        })}\n        onClick={() => setIsVisibleList(!isVisibleList)}\n      >\n        <Typography\n          variant={TypographyTypeStyle.p3}\n          className=\"select__placeholder\"\n          color={genderValue ? undefined : ColorType.darkGrey}\n        >\n          {genderValue ? genderValue : 'Your gender'}\n        </Typography>\n\n        <Icon\n          className={classNames(`select__button`, {\n            ' select__button_active': isVisibleList,\n          })}\n          name={IconName.arrowDown}\n          color={ColorType.primary}\n        />\n\n        <ul className={classProps}>\n          {options.map((item) => (\n            <li\n              className=\"select__item\"\n              onClick={() => {\n                setValue('gender', item.id, { shouldValidate: true });\n                setGenderValue(item.gender);\n                setIsVisibleList(!isVisibleList);\n                clearErrors(['gender']);\n              }}\n              key={item.id}\n            >\n              <Typography variant={TypographyTypeStyle.p3}>{item.gender}</Typography>\n            </li>\n          ))}\n        </ul>\n      </Wrapper>\n\n      {error && <Label errorText={error} className=\"form-field__label_notification_error\" />}\n    </Wrapper>\n  );\n};\n","import React, { useCallback, useContext, useEffect } from 'react';\nimport { useHistory } from 'react-router';\nimport { observer } from 'mobx-react-lite';\nimport { useForm, Controller, SubmitHandler, FieldValues } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { RootStoreContext } from '../../../store/RootStore';\nimport { IconName } from '../../atoms/Icon/types/types';\nimport { Button } from '../../atoms/Button';\nimport { Typography } from '../../atoms/Typography';\nimport { Wrapper } from '../../atoms/Wrapper';\nimport { FormSelect } from '../../molecules/FormSelect';\nimport { Spinner } from '../../molecules/Spinner';\nimport { ButtonIcon } from '../../molecules/ButtonIcon';\nimport { CaptchaBlock } from '../../molecules/CaptchaBlock';\nimport { FormInput } from '../../molecules/FormInput';\nimport { ButtonSize, ButtonType, ButtonVariant } from '../../atoms/Button/types/types';\nimport { InputId, InputSize, InputType } from '../../molecules/FormInput/types/types';\nimport { TypographyTypeStyle } from '../../atoms/Typography/types/types';\nimport { convertDataToFormData } from '../../../utils/convertDataToFormData';\nimport { defineFieldError } from '../../../utils/defineFieldError';\nimport { SCREENS } from '../../../router/endpoints';\nimport { LOADING_STATE } from '../../../store/types/types';\n\nimport './signUpForm.scss';\n\nexport interface ISignUpFormField {\n  login: string;\n  password?: string;\n  passwordConfirm?: string;\n  nickname: string;\n  gender: string;\n  captcha?: string;\n}\n\nconst schema = yup.object().shape({\n  login: yup\n    .string()\n    .min(2, 'Your name must contain at least 2 letters')\n    .max(50, 'Your name must be less than 50 letters')\n    .required('Please input your name'),\n  password: yup.string().required('Please input password'),\n  passwordConfirm: yup\n    .string()\n    .required('Please confirm password')\n    .oneOf([yup.ref('password'), null], 'Passwords must match'),\n  nickname: yup\n    .string()\n    .min(2, 'Your name must contain at least 2 letters')\n    .max(50, 'Your name must be less than 50 letters')\n    .required('Please input your name'),\n  gender: yup.string().required('Please choose your gender').typeError('Choose your gender'),\n  captcha: yup\n    .string()\n    .min(5, 'Min 5 symbols')\n    .max(5, 'Max 5 symbols')\n    .required('Please input captcha'),\n});\n\nexport const SignUpForm = observer(() => {\n  const history = useHistory();\n  const { genderListStore, userStore } = useContext(RootStoreContext);\n\n  const handleFetchGenderList = useCallback(() => {\n    genderListStore.fetchGenderList();\n  }, [genderListStore]);\n\n  const {\n    handleSubmit,\n    control,\n    setValue,\n    setError,\n    clearErrors,\n    formState: { errors, isValid, isSubmitSuccessful },\n  } = useForm<FieldValues>({\n    mode: 'onChange',\n    resolver: yupResolver(schema),\n    defaultValues: {\n      login: '',\n      password: '',\n      passwordConfirm: '',\n      nickname: '',\n      gender: '',\n      captcha: '',\n    },\n  });\n\n  const onSubmit: SubmitHandler<ISignUpFormField> = async (formData) => {\n    const isRegistrationSuccess = await userStore.sendUserAuthData<boolean>(\n      convertDataToFormData(formData),\n      '/auth/register'\n    );\n\n    isRegistrationSuccess && history.push(SCREENS.SCREEN_LOGIN);\n  };\n\n  useEffect(() => {\n    if (userStore.userAuthDataError && isSubmitSuccessful) {\n      defineFieldError(userStore.userAuthDataError, setError);\n    }\n  }, [setError, userStore.userAuthDataError, isSubmitSuccessful]);\n\n  return (\n    <Wrapper className=\"form-sign-up\">\n      <Typography className=\"form-sign-up__text\" variant={TypographyTypeStyle.h2}>\n        Registration\n      </Typography>\n\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Controller\n          name={InputId.login}\n          control={control}\n          render={({ field }) => (\n            <FormInput\n              placeholder={'Input user name'}\n              type={InputType.text}\n              labelText=\"Create user name\"\n              className=\"form-sign-up__input\"\n              field={field}\n              size={InputSize.large}\n              errorText={errors.login?.message}\n            />\n          )}\n        />\n\n        <Controller\n          name={InputId.password}\n          control={control}\n          render={({ field }) => (\n            <FormInput\n              placeholder={'Input password'}\n              type={InputType.text}\n              labelText=\"Create password\"\n              className=\"form-sign-up__input\"\n              field={field}\n              size={InputSize.large}\n              errorText={errors.password?.message}\n            />\n          )}\n        />\n\n        <Controller\n          name={InputId.passwordConfirm}\n          control={control}\n          render={({ field }) => (\n            <FormInput\n              placeholder={'Password confirmation'}\n              type={InputType.text}\n              labelText=\"Password confirmation\"\n              className=\"form-sign-up__input\"\n              field={field}\n              size={InputSize.large}\n              isAvailableAutoComplete={false}\n              errorText={errors.passwordConfirm?.message}\n            />\n          )}\n        />\n\n        <Controller\n          name={InputId.nickname}\n          control={control}\n          render={({ field }) => (\n            <FormInput\n              placeholder={'Nickname'}\n              type={InputType.text}\n              labelText=\"Nickname\"\n              className=\"form-sign-up__input\"\n              field={field}\n              size={InputSize.large}\n              errorText={errors.nickname?.message}\n            />\n          )}\n        />\n\n        {genderListStore.loadingState === LOADING_STATE.PENDING ? (\n          <Spinner />\n        ) : genderListStore.genderListFetchError ? (\n          <Wrapper flex align=\"center\">\n            Failed to fetch gender list. Try again?\n            <ButtonIcon\n              iconName={IconName.updateIcon}\n              type={ButtonType.button}\n              onClick={handleFetchGenderList}\n            />\n          </Wrapper>\n        ) : (\n          <FormSelect\n            options={genderListStore.genderList}\n            labelText={'Your gender'}\n            className=\"form-sign-up__input\"\n            setValue={setValue}\n            clearErrors={clearErrors}\n            error={errors.gender?.message}\n          />\n        )}\n\n        <Wrapper flex className=\"form-sign-up__security-code\">\n          <Controller\n            name={InputId.captcha}\n            control={control}\n            render={({ field }) => (\n              <FormInput\n                placeholder={'Security code'}\n                type={InputType.text}\n                labelText=\"Security code\"\n                className=\"form-sign-up__input\"\n                field={field}\n                isAvailableAutoComplete={false}\n                size={InputSize.medium}\n                errorText={errors.captcha?.message}\n              />\n            )}\n          />\n          <CaptchaBlock />\n        </Wrapper>\n\n        <Wrapper flex className=\"form-sign-up__buttons\">\n          <Button\n            className=\"form-sign-up__button\"\n            variant={ButtonVariant.primary}\n            size={ButtonSize.medium}\n            type={ButtonType.submit}\n            isDisabled={!isValid}\n          >\n            Register\n          </Button>\n\n          <Button\n            className=\"form-sign-up__button\"\n            variant={ButtonVariant.outline}\n            size={ButtonSize.medium}\n            type={ButtonType.button}\n            isNavLink\n            path={SCREENS.SCREEN_LOGIN}\n          >\n            Log In\n          </Button>\n        </Wrapper>\n      </form>\n    </Wrapper>\n  );\n});\n","import React from 'react';\nimport { match } from 'react-router';\nimport { Wrapper } from '../../atoms/Wrapper';\nimport { MainContainer } from '../MainContainer';\nimport { Pages } from '../../../router/endpoints';\n\nimport './authPageTemplate.scss';\n\ninterface IAuthPageTemplate {\n  header?: React.ReactElement;\n  authForm?: React.ReactElement;\n  isLoginPage?: match<Record<string, never>> | null;\n}\n\nexport const AuthPageTemplate: React.FC<IAuthPageTemplate> = ({\n  header,\n  authForm,\n  isLoginPage,\n}): React.ReactElement => {\n  return (\n    <MainContainer page={Pages.auth}>\n      <Wrapper flex column align=\"center\" className=\"auth-page__aside-form\">\n        <Wrapper className={isLoginPage ? 'aside-form__login-inner' : 'aside-form__signup-inner'}>\n          {header}\n          {authForm}\n        </Wrapper>\n      </Wrapper>\n      <Wrapper className=\"auth-page__aside-image\" />\n    </MainContainer>\n  );\n};\n","import React, { useContext, useEffect } from 'react';\nimport { useRouteMatch } from 'react-router';\nimport { Header } from '../../components/organism/Header';\nimport { LoginForm } from '../../components/organism/LoginForm';\nimport { SignUpForm } from '../../components/organism/SignUpForm';\nimport { AuthPageTemplate } from '../../components/templates/AuthPageTemplate';\nimport { RootStoreContext } from '../../store/RootStore';\nimport { SCREENS } from '../../router/endpoints';\n\nexport const AuthPage = (): React.ReactElement => {\n  const isLoginPage = useRouteMatch(`${SCREENS.SCREEN_LOGIN}`);\n  const { genderListStore } = useContext(RootStoreContext);\n\n  useEffect(() => {\n    genderListStore.fetchGenderList();\n  }, [genderListStore]);\n\n  return (\n    <AuthPageTemplate\n      header={<Header isLoginPage />}\n      authForm={isLoginPage ? <LoginForm /> : <SignUpForm />}\n      isLoginPage={isLoginPage}\n    />\n  );\n};\n","import React from 'react';\nimport * as H from 'history';\nimport { Route, Redirect, RouteComponentProps } from 'react-router-dom';\nimport { SCREENS } from './endpoints';\n\ninterface IProps {\n  component: React.FC<RouteComponentProps>;\n  path: SCREENS | SCREENS[];\n  redirectPath: H.LocationDescriptor;\n  exact: boolean;\n  isUserAuthenticate: boolean;\n}\n\nexport const PrivateRoute: React.FC<IProps> = ({\n  component: Component,\n  isUserAuthenticate,\n  redirectPath,\n  ...rest\n}) => {\n  return (\n    <Route\n      {...rest}\n      render={(props) => {\n        return isUserAuthenticate ? <Component {...props} /> : <Redirect to={redirectPath} />;\n      }}\n    />\n  );\n};\n","import React, { useContext } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { observer } from 'mobx-react-lite';\nimport { ChatPage } from '../pages/ChatPage';\nimport { AuthPage } from '../pages/AuthPage';\nimport { PrivateRoute } from './PrivateRoute';\nimport { SCREENS } from './endpoints';\nimport { RootStoreContext } from '../store/RootStore';\n\nexport const Routes: React.FC = observer(() => {\n  const { userStore } = useContext(RootStoreContext);\n\n  const {\n    userInfo: { isUserAuthenticate },\n  } = userStore;\n\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <PrivateRoute\n          component={ChatPage}\n          exact\n          path={[SCREENS.SCREEN_DIALOGS, SCREENS.SCREEN_CURRENT_DIALOG]}\n          isUserAuthenticate={isUserAuthenticate}\n          redirectPath={SCREENS.SCREEN_LOGIN}\n        />\n\n        <PrivateRoute\n          component={AuthPage}\n          exact\n          path={[SCREENS.SCREEN_LOGIN, SCREENS.SCREEN_SIGN_UP, SCREENS.SCREEN_HOME]}\n          isUserAuthenticate={!isUserAuthenticate}\n          redirectPath={SCREENS.SCREEN_DIALOGS}\n        />\n        <Route component={() => <>404: Page not found</>} />\n      </Switch>\n    </Router>\n  );\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Routes } from './router';\n\nimport './styles/index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Routes />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","var map = {\n\t\"./addFile.svg\": [\n\t\t223,\n\t\t3\n\t],\n\t\"./arrowDown.svg\": [\n\t\t224,\n\t\t4\n\t],\n\t\"./arrowLeft.svg\": [\n\t\t225,\n\t\t5\n\t],\n\t\"./closeCircleIcon.svg\": [\n\t\t226,\n\t\t6\n\t],\n\t\"./closeIcon.svg\": [\n\t\t227,\n\t\t7\n\t],\n\t\"./deleteIcon.svg\": [\n\t\t228,\n\t\t8\n\t],\n\t\"./femaleAvatar.svg\": [\n\t\t229,\n\t\t9\n\t],\n\t\"./inputError.svg\": [\n\t\t230,\n\t\t10\n\t],\n\t\"./loginPageFrame.svg\": [\n\t\t231,\n\t\t11\n\t],\n\t\"./loginPageFrameMobile.svg\": [\n\t\t232,\n\t\t12\n\t],\n\t\"./logo.svg\": [\n\t\t233,\n\t\t13\n\t],\n\t\"./maleAvatar.svg\": [\n\t\t234,\n\t\t14\n\t],\n\t\"./messageAreaFrame.svg\": [\n\t\t235,\n\t\t15\n\t],\n\t\"./noUserAvatar.svg\": [\n\t\t236,\n\t\t16\n\t],\n\t\"./sendMessage.svg\": [\n\t\t237,\n\t\t17\n\t],\n\t\"./spiner.svg\": [\n\t\t238,\n\t\t18\n\t],\n\t\"./spinnerCircle.svg\": [\n\t\t239,\n\t\t19\n\t],\n\t\"./updateIcon.svg\": [\n\t\t240,\n\t\t20\n\t],\n\t\"./userIcon.svg\": [\n\t\t241,\n\t\t21\n\t],\n\t\"./userList.svg\": [\n\t\t242,\n\t\t22\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 99;\nmodule.exports = webpackAsyncContext;"],"sourceRoot":""}